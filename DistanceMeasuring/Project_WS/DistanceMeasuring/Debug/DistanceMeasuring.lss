
DistanceMeasuring.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  000024d6  0000256a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800178  00800178  00002682  2**0
                  ALLOC
  3 .stab         00001d1c  00000000  00000000  00002684  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e0b  00000000  00000000  000043a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000051ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000534b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000553d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00007948  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00008cce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00009ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000a064  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000a35a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000acc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ed       	ldi	r30, 0xD6	; 214
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 37       	cpi	r26, 0x7D	; 125
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4c 0c 	call	0x1898	; 0x1898 <main>
      8a:	0c 94 69 12 	jmp	0x24d2	; 0x24d2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ed 11 	jmp	0x23da	; 0x23da <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e7       	ldi	r26, 0x70	; 112
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 15 12 	jmp	0x242a	; 0x242a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 15 12 	jmp	0x242a	; 0x242a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ed 11 	jmp	0x23da	; 0x23da <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e7       	ldi	r24, 0x70	; 112
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f5 11 	jmp	0x23ea	; 0x23ea <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e7       	ldi	r22, 0x70	; 112
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 15 12 	jmp	0x242a	; 0x242a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 15 12 	jmp	0x242a	; 0x242a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 15 12 	jmp	0x242a	; 0x242a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 19 12 	jmp	0x2432	; 0x2432 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 f5 11 	jmp	0x23ea	; 0x23ea <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 58       	subi	r30, 0x88	; 136
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <LCD_init>:
#include "common_macros.h"
#include "LCD.h"
#include <util/delay.h>
#include "gpio.h"
/* initialize LCD */
void LCD_init(void){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	2e 97       	sbiw	r28, 0x0e	; 14
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID,PIN_OUTPUT);
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	41 e0       	ldi	r20, 0x01	; 1
     e48:	0e 94 8f 0c 	call	0x191e	; 0x191e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_EN_PORT_ID,LCD_EN_PIN_ID,PIN_OUTPUT);
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	62 e0       	ldi	r22, 0x02	; 2
     e50:	41 e0       	ldi	r20, 0x01	; 1
     e52:	0e 94 8f 0c 	call	0x191e	; 0x191e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	61 e0       	ldi	r22, 0x01	; 1
     e5a:	41 e0       	ldi	r20, 0x01	; 1
     e5c:	0e 94 8f 0c 	call	0x191e	; 0x191e <GPIO_setupPinDirection>
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	a0 ea       	ldi	r26, 0xA0	; 160
     e66:	b1 e4       	ldi	r27, 0x41	; 65
     e68:	8b 87       	std	Y+11, r24	; 0x0b
     e6a:	9c 87       	std	Y+12, r25	; 0x0c
     e6c:	ad 87       	std	Y+13, r26	; 0x0d
     e6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e70:	6b 85       	ldd	r22, Y+11	; 0x0b
     e72:	7c 85       	ldd	r23, Y+12	; 0x0c
     e74:	8d 85       	ldd	r24, Y+13	; 0x0d
     e76:	9e 85       	ldd	r25, Y+14	; 0x0e
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	4a ef       	ldi	r20, 0xFA	; 250
     e7e:	54 e4       	ldi	r21, 0x44	; 68
     e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	8f 83       	std	Y+7, r24	; 0x07
     e8a:	98 87       	std	Y+8, r25	; 0x08
     e8c:	a9 87       	std	Y+9, r26	; 0x09
     e8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e90:	6f 81       	ldd	r22, Y+7	; 0x07
     e92:	78 85       	ldd	r23, Y+8	; 0x08
     e94:	89 85       	ldd	r24, Y+9	; 0x09
     e96:	9a 85       	ldd	r25, Y+10	; 0x0a
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	40 e8       	ldi	r20, 0x80	; 128
     e9e:	5f e3       	ldi	r21, 0x3F	; 63
     ea0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     ea4:	88 23       	and	r24, r24
     ea6:	2c f4       	brge	.+10     	; 0xeb2 <LCD_init+0x84>
		__ticks = 1;
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	9e 83       	std	Y+6, r25	; 0x06
     eae:	8d 83       	std	Y+5, r24	; 0x05
     eb0:	3f c0       	rjmp	.+126    	; 0xf30 <LCD_init+0x102>
	else if (__tmp > 65535)
     eb2:	6f 81       	ldd	r22, Y+7	; 0x07
     eb4:	78 85       	ldd	r23, Y+8	; 0x08
     eb6:	89 85       	ldd	r24, Y+9	; 0x09
     eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	3f ef       	ldi	r19, 0xFF	; 255
     ebe:	4f e7       	ldi	r20, 0x7F	; 127
     ec0:	57 e4       	ldi	r21, 0x47	; 71
     ec2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ec6:	18 16       	cp	r1, r24
     ec8:	4c f5       	brge	.+82     	; 0xf1c <LCD_init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eca:	6b 85       	ldd	r22, Y+11	; 0x0b
     ecc:	7c 85       	ldd	r23, Y+12	; 0x0c
     ece:	8d 85       	ldd	r24, Y+13	; 0x0d
     ed0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	40 e2       	ldi	r20, 0x20	; 32
     ed8:	51 e4       	ldi	r21, 0x41	; 65
     eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	bc 01       	movw	r22, r24
     ee4:	cd 01       	movw	r24, r26
     ee6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	9e 83       	std	Y+6, r25	; 0x06
     ef0:	8d 83       	std	Y+5, r24	; 0x05
     ef2:	0f c0       	rjmp	.+30     	; 0xf12 <LCD_init+0xe4>
     ef4:	88 ec       	ldi	r24, 0xC8	; 200
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	9c 83       	std	Y+4, r25	; 0x04
     efa:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	9c 81       	ldd	r25, Y+4	; 0x04
     f00:	01 97       	sbiw	r24, 0x01	; 1
     f02:	f1 f7       	brne	.-4      	; 0xf00 <LCD_init+0xd2>
     f04:	9c 83       	std	Y+4, r25	; 0x04
     f06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f08:	8d 81       	ldd	r24, Y+5	; 0x05
     f0a:	9e 81       	ldd	r25, Y+6	; 0x06
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	9e 83       	std	Y+6, r25	; 0x06
     f10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f12:	8d 81       	ldd	r24, Y+5	; 0x05
     f14:	9e 81       	ldd	r25, Y+6	; 0x06
     f16:	00 97       	sbiw	r24, 0x00	; 0
     f18:	69 f7       	brne	.-38     	; 0xef4 <LCD_init+0xc6>
     f1a:	14 c0       	rjmp	.+40     	; 0xf44 <LCD_init+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f1c:	6f 81       	ldd	r22, Y+7	; 0x07
     f1e:	78 85       	ldd	r23, Y+8	; 0x08
     f20:	89 85       	ldd	r24, Y+9	; 0x09
     f22:	9a 85       	ldd	r25, Y+10	; 0x0a
     f24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	9e 83       	std	Y+6, r25	; 0x06
     f2e:	8d 83       	std	Y+5, r24	; 0x05
     f30:	8d 81       	ldd	r24, Y+5	; 0x05
     f32:	9e 81       	ldd	r25, Y+6	; 0x06
     f34:	9a 83       	std	Y+2, r25	; 0x02
     f36:	89 83       	std	Y+1, r24	; 0x01
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	9a 81       	ldd	r25, Y+2	; 0x02
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	f1 f7       	brne	.-4      	; 0xf3c <LCD_init+0x10e>
     f40:	9a 83       	std	Y+2, r25	; 0x02
     f42:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
	/* choose the mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BIT_MODE);
#else
	/* Set the Port as output */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	6f ef       	ldi	r22, 0xFF	; 255
     f48:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <GPIO_setupPortDirection>
	/* choose the mode ...two lines and EIGHT MODE*/
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BIT_MODE);
     f4c:	88 e3       	ldi	r24, 0x38	; 56
     f4e:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
     f52:	8c e0       	ldi	r24, 0x0C	; 12
     f54:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_DISPLAY); /* clear LCD at the beginning*/
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_sendCommand>
	GPIO_writePin(LCD_RW_PORT_ID ,LCD_RW_PIN_ID,LOGIC_LOW);
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	61 e0       	ldi	r22, 0x01	; 1
     f62:	40 e0       	ldi	r20, 0x00	; 0
     f64:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <GPIO_writePin>
}
     f68:	2e 96       	adiw	r28, 0x0e	; 14
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	de bf       	out	0x3e, r29	; 62
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cd bf       	out	0x3d, r28	; 61
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <LCD_sendCommand>:
void LCD_sendCommand(uint8 command){
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
     f82:	e9 97       	sbiw	r28, 0x39	; 57
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	cd bf       	out	0x3d, r28	; 61
     f8e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID ,LCD_RS_PIN_ID,LOGIC_LOW);
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	60 e0       	ldi	r22, 0x00	; 0
     f94:	40 e0       	ldi	r20, 0x00	; 0
     f96:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <GPIO_writePin>
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	a0 e8       	ldi	r26, 0x80	; 128
     fa0:	bf e3       	ldi	r27, 0x3F	; 63
     fa2:	8d ab       	std	Y+53, r24	; 0x35
     fa4:	9e ab       	std	Y+54, r25	; 0x36
     fa6:	af ab       	std	Y+55, r26	; 0x37
     fa8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     faa:	6d a9       	ldd	r22, Y+53	; 0x35
     fac:	7e a9       	ldd	r23, Y+54	; 0x36
     fae:	8f a9       	ldd	r24, Y+55	; 0x37
     fb0:	98 ad       	ldd	r25, Y+56	; 0x38
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	4a ef       	ldi	r20, 0xFA	; 250
     fb8:	54 e4       	ldi	r21, 0x44	; 68
     fba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fbe:	dc 01       	movw	r26, r24
     fc0:	cb 01       	movw	r24, r22
     fc2:	89 ab       	std	Y+49, r24	; 0x31
     fc4:	9a ab       	std	Y+50, r25	; 0x32
     fc6:	ab ab       	std	Y+51, r26	; 0x33
     fc8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     fca:	69 a9       	ldd	r22, Y+49	; 0x31
     fcc:	7a a9       	ldd	r23, Y+50	; 0x32
     fce:	8b a9       	ldd	r24, Y+51	; 0x33
     fd0:	9c a9       	ldd	r25, Y+52	; 0x34
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	40 e8       	ldi	r20, 0x80	; 128
     fd8:	5f e3       	ldi	r21, 0x3F	; 63
     fda:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fde:	88 23       	and	r24, r24
     fe0:	2c f4       	brge	.+10     	; 0xfec <LCD_sendCommand+0x72>
		__ticks = 1;
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	98 ab       	std	Y+48, r25	; 0x30
     fe8:	8f a7       	std	Y+47, r24	; 0x2f
     fea:	3f c0       	rjmp	.+126    	; 0x106a <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
     fec:	69 a9       	ldd	r22, Y+49	; 0x31
     fee:	7a a9       	ldd	r23, Y+50	; 0x32
     ff0:	8b a9       	ldd	r24, Y+51	; 0x33
     ff2:	9c a9       	ldd	r25, Y+52	; 0x34
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	3f ef       	ldi	r19, 0xFF	; 255
     ff8:	4f e7       	ldi	r20, 0x7F	; 127
     ffa:	57 e4       	ldi	r21, 0x47	; 71
     ffc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1000:	18 16       	cp	r1, r24
    1002:	4c f5       	brge	.+82     	; 0x1056 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1004:	6d a9       	ldd	r22, Y+53	; 0x35
    1006:	7e a9       	ldd	r23, Y+54	; 0x36
    1008:	8f a9       	ldd	r24, Y+55	; 0x37
    100a:	98 ad       	ldd	r25, Y+56	; 0x38
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	40 e2       	ldi	r20, 0x20	; 32
    1012:	51 e4       	ldi	r21, 0x41	; 65
    1014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1018:	dc 01       	movw	r26, r24
    101a:	cb 01       	movw	r24, r22
    101c:	bc 01       	movw	r22, r24
    101e:	cd 01       	movw	r24, r26
    1020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	98 ab       	std	Y+48, r25	; 0x30
    102a:	8f a7       	std	Y+47, r24	; 0x2f
    102c:	0f c0       	rjmp	.+30     	; 0x104c <LCD_sendCommand+0xd2>
    102e:	88 ec       	ldi	r24, 0xC8	; 200
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	9e a7       	std	Y+46, r25	; 0x2e
    1034:	8d a7       	std	Y+45, r24	; 0x2d
    1036:	8d a5       	ldd	r24, Y+45	; 0x2d
    1038:	9e a5       	ldd	r25, Y+46	; 0x2e
    103a:	01 97       	sbiw	r24, 0x01	; 1
    103c:	f1 f7       	brne	.-4      	; 0x103a <LCD_sendCommand+0xc0>
    103e:	9e a7       	std	Y+46, r25	; 0x2e
    1040:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1042:	8f a5       	ldd	r24, Y+47	; 0x2f
    1044:	98 a9       	ldd	r25, Y+48	; 0x30
    1046:	01 97       	sbiw	r24, 0x01	; 1
    1048:	98 ab       	std	Y+48, r25	; 0x30
    104a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    104c:	8f a5       	ldd	r24, Y+47	; 0x2f
    104e:	98 a9       	ldd	r25, Y+48	; 0x30
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	69 f7       	brne	.-38     	; 0x102e <LCD_sendCommand+0xb4>
    1054:	14 c0       	rjmp	.+40     	; 0x107e <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1056:	69 a9       	ldd	r22, Y+49	; 0x31
    1058:	7a a9       	ldd	r23, Y+50	; 0x32
    105a:	8b a9       	ldd	r24, Y+51	; 0x33
    105c:	9c a9       	ldd	r25, Y+52	; 0x34
    105e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1062:	dc 01       	movw	r26, r24
    1064:	cb 01       	movw	r24, r22
    1066:	98 ab       	std	Y+48, r25	; 0x30
    1068:	8f a7       	std	Y+47, r24	; 0x2f
    106a:	8f a5       	ldd	r24, Y+47	; 0x2f
    106c:	98 a9       	ldd	r25, Y+48	; 0x30
    106e:	9c a7       	std	Y+44, r25	; 0x2c
    1070:	8b a7       	std	Y+43, r24	; 0x2b
    1072:	8b a5       	ldd	r24, Y+43	; 0x2b
    1074:	9c a5       	ldd	r25, Y+44	; 0x2c
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	f1 f7       	brne	.-4      	; 0x1076 <LCD_sendCommand+0xfc>
    107a:	9c a7       	std	Y+44, r25	; 0x2c
    107c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);       /*delay for tas = 50ns*/
	GPIO_writePin(LCD_EN_PORT_ID ,LCD_EN_PIN_ID,LOGIC_HIGH);
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	62 e0       	ldi	r22, 0x02	; 2
    1082:	41 e0       	ldi	r20, 0x01	; 1
    1084:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <GPIO_writePin>
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	a0 e8       	ldi	r26, 0x80	; 128
    108e:	bf e3       	ldi	r27, 0x3F	; 63
    1090:	8f a3       	std	Y+39, r24	; 0x27
    1092:	98 a7       	std	Y+40, r25	; 0x28
    1094:	a9 a7       	std	Y+41, r26	; 0x29
    1096:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1098:	6f a1       	ldd	r22, Y+39	; 0x27
    109a:	78 a5       	ldd	r23, Y+40	; 0x28
    109c:	89 a5       	ldd	r24, Y+41	; 0x29
    109e:	9a a5       	ldd	r25, Y+42	; 0x2a
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	4a ef       	ldi	r20, 0xFA	; 250
    10a6:	54 e4       	ldi	r21, 0x44	; 68
    10a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	8b a3       	std	Y+35, r24	; 0x23
    10b2:	9c a3       	std	Y+36, r25	; 0x24
    10b4:	ad a3       	std	Y+37, r26	; 0x25
    10b6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10b8:	6b a1       	ldd	r22, Y+35	; 0x23
    10ba:	7c a1       	ldd	r23, Y+36	; 0x24
    10bc:	8d a1       	ldd	r24, Y+37	; 0x25
    10be:	9e a1       	ldd	r25, Y+38	; 0x26
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	40 e8       	ldi	r20, 0x80	; 128
    10c6:	5f e3       	ldi	r21, 0x3F	; 63
    10c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10cc:	88 23       	and	r24, r24
    10ce:	2c f4       	brge	.+10     	; 0x10da <LCD_sendCommand+0x160>
		__ticks = 1;
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	9a a3       	std	Y+34, r25	; 0x22
    10d6:	89 a3       	std	Y+33, r24	; 0x21
    10d8:	3f c0       	rjmp	.+126    	; 0x1158 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    10da:	6b a1       	ldd	r22, Y+35	; 0x23
    10dc:	7c a1       	ldd	r23, Y+36	; 0x24
    10de:	8d a1       	ldd	r24, Y+37	; 0x25
    10e0:	9e a1       	ldd	r25, Y+38	; 0x26
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	3f ef       	ldi	r19, 0xFF	; 255
    10e6:	4f e7       	ldi	r20, 0x7F	; 127
    10e8:	57 e4       	ldi	r21, 0x47	; 71
    10ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10ee:	18 16       	cp	r1, r24
    10f0:	4c f5       	brge	.+82     	; 0x1144 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10f2:	6f a1       	ldd	r22, Y+39	; 0x27
    10f4:	78 a5       	ldd	r23, Y+40	; 0x28
    10f6:	89 a5       	ldd	r24, Y+41	; 0x29
    10f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	40 e2       	ldi	r20, 0x20	; 32
    1100:	51 e4       	ldi	r21, 0x41	; 65
    1102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	bc 01       	movw	r22, r24
    110c:	cd 01       	movw	r24, r26
    110e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1112:	dc 01       	movw	r26, r24
    1114:	cb 01       	movw	r24, r22
    1116:	9a a3       	std	Y+34, r25	; 0x22
    1118:	89 a3       	std	Y+33, r24	; 0x21
    111a:	0f c0       	rjmp	.+30     	; 0x113a <LCD_sendCommand+0x1c0>
    111c:	88 ec       	ldi	r24, 0xC8	; 200
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	98 a3       	std	Y+32, r25	; 0x20
    1122:	8f 8f       	std	Y+31, r24	; 0x1f
    1124:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1126:	98 a1       	ldd	r25, Y+32	; 0x20
    1128:	01 97       	sbiw	r24, 0x01	; 1
    112a:	f1 f7       	brne	.-4      	; 0x1128 <LCD_sendCommand+0x1ae>
    112c:	98 a3       	std	Y+32, r25	; 0x20
    112e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1130:	89 a1       	ldd	r24, Y+33	; 0x21
    1132:	9a a1       	ldd	r25, Y+34	; 0x22
    1134:	01 97       	sbiw	r24, 0x01	; 1
    1136:	9a a3       	std	Y+34, r25	; 0x22
    1138:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    113a:	89 a1       	ldd	r24, Y+33	; 0x21
    113c:	9a a1       	ldd	r25, Y+34	; 0x22
    113e:	00 97       	sbiw	r24, 0x00	; 0
    1140:	69 f7       	brne	.-38     	; 0x111c <LCD_sendCommand+0x1a2>
    1142:	14 c0       	rjmp	.+40     	; 0x116c <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1144:	6b a1       	ldd	r22, Y+35	; 0x23
    1146:	7c a1       	ldd	r23, Y+36	; 0x24
    1148:	8d a1       	ldd	r24, Y+37	; 0x25
    114a:	9e a1       	ldd	r25, Y+38	; 0x26
    114c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	9a a3       	std	Y+34, r25	; 0x22
    1156:	89 a3       	std	Y+33, r24	; 0x21
    1158:	89 a1       	ldd	r24, Y+33	; 0x21
    115a:	9a a1       	ldd	r25, Y+34	; 0x22
    115c:	9e 8f       	std	Y+30, r25	; 0x1e
    115e:	8d 8f       	std	Y+29, r24	; 0x1d
    1160:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1162:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1164:	01 97       	sbiw	r24, 0x01	; 1
    1166:	f1 f7       	brne	.-4      	; 0x1164 <LCD_sendCommand+0x1ea>
    1168:	9e 8f       	std	Y+30, r25	; 0x1e
    116a:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
	_delay_ms(1);           /*delay for tdsw=100ns*/
	GPIO_writePin(LCD_EN_PORT_ID ,LCD_EN_PIN_ID,LOGIC_LOW);
	_delay_ms(1);           /*delay for th=13ns */
#else
	GPIO_writePort(LCD_DATA_PORT_ID,command);
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	69 ad       	ldd	r22, Y+57	; 0x39
    1170:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <GPIO_writePort>
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	a0 e8       	ldi	r26, 0x80	; 128
    117a:	bf e3       	ldi	r27, 0x3F	; 63
    117c:	89 8f       	std	Y+25, r24	; 0x19
    117e:	9a 8f       	std	Y+26, r25	; 0x1a
    1180:	ab 8f       	std	Y+27, r26	; 0x1b
    1182:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1184:	69 8d       	ldd	r22, Y+25	; 0x19
    1186:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1188:	8b 8d       	ldd	r24, Y+27	; 0x1b
    118a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    118c:	20 e0       	ldi	r18, 0x00	; 0
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	4a ef       	ldi	r20, 0xFA	; 250
    1192:	54 e4       	ldi	r21, 0x44	; 68
    1194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1198:	dc 01       	movw	r26, r24
    119a:	cb 01       	movw	r24, r22
    119c:	8d 8b       	std	Y+21, r24	; 0x15
    119e:	9e 8b       	std	Y+22, r25	; 0x16
    11a0:	af 8b       	std	Y+23, r26	; 0x17
    11a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11a4:	6d 89       	ldd	r22, Y+21	; 0x15
    11a6:	7e 89       	ldd	r23, Y+22	; 0x16
    11a8:	8f 89       	ldd	r24, Y+23	; 0x17
    11aa:	98 8d       	ldd	r25, Y+24	; 0x18
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	40 e8       	ldi	r20, 0x80	; 128
    11b2:	5f e3       	ldi	r21, 0x3F	; 63
    11b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11b8:	88 23       	and	r24, r24
    11ba:	2c f4       	brge	.+10     	; 0x11c6 <LCD_sendCommand+0x24c>
		__ticks = 1;
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	9c 8b       	std	Y+20, r25	; 0x14
    11c2:	8b 8b       	std	Y+19, r24	; 0x13
    11c4:	3f c0       	rjmp	.+126    	; 0x1244 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    11c6:	6d 89       	ldd	r22, Y+21	; 0x15
    11c8:	7e 89       	ldd	r23, Y+22	; 0x16
    11ca:	8f 89       	ldd	r24, Y+23	; 0x17
    11cc:	98 8d       	ldd	r25, Y+24	; 0x18
    11ce:	20 e0       	ldi	r18, 0x00	; 0
    11d0:	3f ef       	ldi	r19, 0xFF	; 255
    11d2:	4f e7       	ldi	r20, 0x7F	; 127
    11d4:	57 e4       	ldi	r21, 0x47	; 71
    11d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11da:	18 16       	cp	r1, r24
    11dc:	4c f5       	brge	.+82     	; 0x1230 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11de:	69 8d       	ldd	r22, Y+25	; 0x19
    11e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	40 e2       	ldi	r20, 0x20	; 32
    11ec:	51 e4       	ldi	r21, 0x41	; 65
    11ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f2:	dc 01       	movw	r26, r24
    11f4:	cb 01       	movw	r24, r22
    11f6:	bc 01       	movw	r22, r24
    11f8:	cd 01       	movw	r24, r26
    11fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11fe:	dc 01       	movw	r26, r24
    1200:	cb 01       	movw	r24, r22
    1202:	9c 8b       	std	Y+20, r25	; 0x14
    1204:	8b 8b       	std	Y+19, r24	; 0x13
    1206:	0f c0       	rjmp	.+30     	; 0x1226 <LCD_sendCommand+0x2ac>
    1208:	88 ec       	ldi	r24, 0xC8	; 200
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	9a 8b       	std	Y+18, r25	; 0x12
    120e:	89 8b       	std	Y+17, r24	; 0x11
    1210:	89 89       	ldd	r24, Y+17	; 0x11
    1212:	9a 89       	ldd	r25, Y+18	; 0x12
    1214:	01 97       	sbiw	r24, 0x01	; 1
    1216:	f1 f7       	brne	.-4      	; 0x1214 <LCD_sendCommand+0x29a>
    1218:	9a 8b       	std	Y+18, r25	; 0x12
    121a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    121c:	8b 89       	ldd	r24, Y+19	; 0x13
    121e:	9c 89       	ldd	r25, Y+20	; 0x14
    1220:	01 97       	sbiw	r24, 0x01	; 1
    1222:	9c 8b       	std	Y+20, r25	; 0x14
    1224:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1226:	8b 89       	ldd	r24, Y+19	; 0x13
    1228:	9c 89       	ldd	r25, Y+20	; 0x14
    122a:	00 97       	sbiw	r24, 0x00	; 0
    122c:	69 f7       	brne	.-38     	; 0x1208 <LCD_sendCommand+0x28e>
    122e:	14 c0       	rjmp	.+40     	; 0x1258 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1230:	6d 89       	ldd	r22, Y+21	; 0x15
    1232:	7e 89       	ldd	r23, Y+22	; 0x16
    1234:	8f 89       	ldd	r24, Y+23	; 0x17
    1236:	98 8d       	ldd	r25, Y+24	; 0x18
    1238:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	9c 8b       	std	Y+20, r25	; 0x14
    1242:	8b 8b       	std	Y+19, r24	; 0x13
    1244:	8b 89       	ldd	r24, Y+19	; 0x13
    1246:	9c 89       	ldd	r25, Y+20	; 0x14
    1248:	98 8b       	std	Y+16, r25	; 0x10
    124a:	8f 87       	std	Y+15, r24	; 0x0f
    124c:	8f 85       	ldd	r24, Y+15	; 0x0f
    124e:	98 89       	ldd	r25, Y+16	; 0x10
    1250:	01 97       	sbiw	r24, 0x01	; 1
    1252:	f1 f7       	brne	.-4      	; 0x1250 <LCD_sendCommand+0x2d6>
    1254:	98 8b       	std	Y+16, r25	; 0x10
    1256:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);         /*delay for tdsw=100ns*/
	GPIO_writePin(LCD_EN_PORT_ID ,LCD_EN_PIN_ID,LOGIC_LOW);
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	62 e0       	ldi	r22, 0x02	; 2
    125c:	40 e0       	ldi	r20, 0x00	; 0
    125e:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <GPIO_writePin>
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	a0 e8       	ldi	r26, 0x80	; 128
    1268:	bf e3       	ldi	r27, 0x3F	; 63
    126a:	8b 87       	std	Y+11, r24	; 0x0b
    126c:	9c 87       	std	Y+12, r25	; 0x0c
    126e:	ad 87       	std	Y+13, r26	; 0x0d
    1270:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1272:	6b 85       	ldd	r22, Y+11	; 0x0b
    1274:	7c 85       	ldd	r23, Y+12	; 0x0c
    1276:	8d 85       	ldd	r24, Y+13	; 0x0d
    1278:	9e 85       	ldd	r25, Y+14	; 0x0e
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	4a ef       	ldi	r20, 0xFA	; 250
    1280:	54 e4       	ldi	r21, 0x44	; 68
    1282:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1286:	dc 01       	movw	r26, r24
    1288:	cb 01       	movw	r24, r22
    128a:	8f 83       	std	Y+7, r24	; 0x07
    128c:	98 87       	std	Y+8, r25	; 0x08
    128e:	a9 87       	std	Y+9, r26	; 0x09
    1290:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1292:	6f 81       	ldd	r22, Y+7	; 0x07
    1294:	78 85       	ldd	r23, Y+8	; 0x08
    1296:	89 85       	ldd	r24, Y+9	; 0x09
    1298:	9a 85       	ldd	r25, Y+10	; 0x0a
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	40 e8       	ldi	r20, 0x80	; 128
    12a0:	5f e3       	ldi	r21, 0x3F	; 63
    12a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12a6:	88 23       	and	r24, r24
    12a8:	2c f4       	brge	.+10     	; 0x12b4 <LCD_sendCommand+0x33a>
		__ticks = 1;
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	9e 83       	std	Y+6, r25	; 0x06
    12b0:	8d 83       	std	Y+5, r24	; 0x05
    12b2:	3f c0       	rjmp	.+126    	; 0x1332 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    12b4:	6f 81       	ldd	r22, Y+7	; 0x07
    12b6:	78 85       	ldd	r23, Y+8	; 0x08
    12b8:	89 85       	ldd	r24, Y+9	; 0x09
    12ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	3f ef       	ldi	r19, 0xFF	; 255
    12c0:	4f e7       	ldi	r20, 0x7F	; 127
    12c2:	57 e4       	ldi	r21, 0x47	; 71
    12c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12c8:	18 16       	cp	r1, r24
    12ca:	4c f5       	brge	.+82     	; 0x131e <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    12d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    12d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	40 e2       	ldi	r20, 0x20	; 32
    12da:	51 e4       	ldi	r21, 0x41	; 65
    12dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e0:	dc 01       	movw	r26, r24
    12e2:	cb 01       	movw	r24, r22
    12e4:	bc 01       	movw	r22, r24
    12e6:	cd 01       	movw	r24, r26
    12e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ec:	dc 01       	movw	r26, r24
    12ee:	cb 01       	movw	r24, r22
    12f0:	9e 83       	std	Y+6, r25	; 0x06
    12f2:	8d 83       	std	Y+5, r24	; 0x05
    12f4:	0f c0       	rjmp	.+30     	; 0x1314 <LCD_sendCommand+0x39a>
    12f6:	88 ec       	ldi	r24, 0xC8	; 200
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	9c 83       	std	Y+4, r25	; 0x04
    12fc:	8b 83       	std	Y+3, r24	; 0x03
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	9c 81       	ldd	r25, Y+4	; 0x04
    1302:	01 97       	sbiw	r24, 0x01	; 1
    1304:	f1 f7       	brne	.-4      	; 0x1302 <LCD_sendCommand+0x388>
    1306:	9c 83       	std	Y+4, r25	; 0x04
    1308:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    130a:	8d 81       	ldd	r24, Y+5	; 0x05
    130c:	9e 81       	ldd	r25, Y+6	; 0x06
    130e:	01 97       	sbiw	r24, 0x01	; 1
    1310:	9e 83       	std	Y+6, r25	; 0x06
    1312:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1314:	8d 81       	ldd	r24, Y+5	; 0x05
    1316:	9e 81       	ldd	r25, Y+6	; 0x06
    1318:	00 97       	sbiw	r24, 0x00	; 0
    131a:	69 f7       	brne	.-38     	; 0x12f6 <LCD_sendCommand+0x37c>
    131c:	14 c0       	rjmp	.+40     	; 0x1346 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    131e:	6f 81       	ldd	r22, Y+7	; 0x07
    1320:	78 85       	ldd	r23, Y+8	; 0x08
    1322:	89 85       	ldd	r24, Y+9	; 0x09
    1324:	9a 85       	ldd	r25, Y+10	; 0x0a
    1326:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    132a:	dc 01       	movw	r26, r24
    132c:	cb 01       	movw	r24, r22
    132e:	9e 83       	std	Y+6, r25	; 0x06
    1330:	8d 83       	std	Y+5, r24	; 0x05
    1332:	8d 81       	ldd	r24, Y+5	; 0x05
    1334:	9e 81       	ldd	r25, Y+6	; 0x06
    1336:	9a 83       	std	Y+2, r25	; 0x02
    1338:	89 83       	std	Y+1, r24	; 0x01
    133a:	89 81       	ldd	r24, Y+1	; 0x01
    133c:	9a 81       	ldd	r25, Y+2	; 0x02
    133e:	01 97       	sbiw	r24, 0x01	; 1
    1340:	f1 f7       	brne	.-4      	; 0x133e <LCD_sendCommand+0x3c4>
    1342:	9a 83       	std	Y+2, r25	; 0x02
    1344:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);           /*delay for th=13ns */
#endif
}
    1346:	e9 96       	adiw	r28, 0x39	; 57
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	f8 94       	cli
    134c:	de bf       	out	0x3e, r29	; 62
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	cd bf       	out	0x3d, r28	; 61
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	08 95       	ret

00001358 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 character){
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
    1360:	e9 97       	sbiw	r28, 0x39	; 57
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	f8 94       	cli
    1366:	de bf       	out	0x3e, r29	; 62
    1368:	0f be       	out	0x3f, r0	; 63
    136a:	cd bf       	out	0x3d, r28	; 61
    136c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID ,LCD_RS_PIN_ID,LOGIC_HIGH);
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	60 e0       	ldi	r22, 0x00	; 0
    1372:	41 e0       	ldi	r20, 0x01	; 1
    1374:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <GPIO_writePin>
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	a0 e8       	ldi	r26, 0x80	; 128
    137e:	bf e3       	ldi	r27, 0x3F	; 63
    1380:	8d ab       	std	Y+53, r24	; 0x35
    1382:	9e ab       	std	Y+54, r25	; 0x36
    1384:	af ab       	std	Y+55, r26	; 0x37
    1386:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1388:	6d a9       	ldd	r22, Y+53	; 0x35
    138a:	7e a9       	ldd	r23, Y+54	; 0x36
    138c:	8f a9       	ldd	r24, Y+55	; 0x37
    138e:	98 ad       	ldd	r25, Y+56	; 0x38
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	4a ef       	ldi	r20, 0xFA	; 250
    1396:	54 e4       	ldi	r21, 0x44	; 68
    1398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	89 ab       	std	Y+49, r24	; 0x31
    13a2:	9a ab       	std	Y+50, r25	; 0x32
    13a4:	ab ab       	std	Y+51, r26	; 0x33
    13a6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    13a8:	69 a9       	ldd	r22, Y+49	; 0x31
    13aa:	7a a9       	ldd	r23, Y+50	; 0x32
    13ac:	8b a9       	ldd	r24, Y+51	; 0x33
    13ae:	9c a9       	ldd	r25, Y+52	; 0x34
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	40 e8       	ldi	r20, 0x80	; 128
    13b6:	5f e3       	ldi	r21, 0x3F	; 63
    13b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13bc:	88 23       	and	r24, r24
    13be:	2c f4       	brge	.+10     	; 0x13ca <LCD_displayCharacter+0x72>
		__ticks = 1;
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	98 ab       	std	Y+48, r25	; 0x30
    13c6:	8f a7       	std	Y+47, r24	; 0x2f
    13c8:	3f c0       	rjmp	.+126    	; 0x1448 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    13ca:	69 a9       	ldd	r22, Y+49	; 0x31
    13cc:	7a a9       	ldd	r23, Y+50	; 0x32
    13ce:	8b a9       	ldd	r24, Y+51	; 0x33
    13d0:	9c a9       	ldd	r25, Y+52	; 0x34
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	3f ef       	ldi	r19, 0xFF	; 255
    13d6:	4f e7       	ldi	r20, 0x7F	; 127
    13d8:	57 e4       	ldi	r21, 0x47	; 71
    13da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13de:	18 16       	cp	r1, r24
    13e0:	4c f5       	brge	.+82     	; 0x1434 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e2:	6d a9       	ldd	r22, Y+53	; 0x35
    13e4:	7e a9       	ldd	r23, Y+54	; 0x36
    13e6:	8f a9       	ldd	r24, Y+55	; 0x37
    13e8:	98 ad       	ldd	r25, Y+56	; 0x38
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	40 e2       	ldi	r20, 0x20	; 32
    13f0:	51 e4       	ldi	r21, 0x41	; 65
    13f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f6:	dc 01       	movw	r26, r24
    13f8:	cb 01       	movw	r24, r22
    13fa:	bc 01       	movw	r22, r24
    13fc:	cd 01       	movw	r24, r26
    13fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1402:	dc 01       	movw	r26, r24
    1404:	cb 01       	movw	r24, r22
    1406:	98 ab       	std	Y+48, r25	; 0x30
    1408:	8f a7       	std	Y+47, r24	; 0x2f
    140a:	0f c0       	rjmp	.+30     	; 0x142a <LCD_displayCharacter+0xd2>
    140c:	88 ec       	ldi	r24, 0xC8	; 200
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	9e a7       	std	Y+46, r25	; 0x2e
    1412:	8d a7       	std	Y+45, r24	; 0x2d
    1414:	8d a5       	ldd	r24, Y+45	; 0x2d
    1416:	9e a5       	ldd	r25, Y+46	; 0x2e
    1418:	01 97       	sbiw	r24, 0x01	; 1
    141a:	f1 f7       	brne	.-4      	; 0x1418 <LCD_displayCharacter+0xc0>
    141c:	9e a7       	std	Y+46, r25	; 0x2e
    141e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1420:	8f a5       	ldd	r24, Y+47	; 0x2f
    1422:	98 a9       	ldd	r25, Y+48	; 0x30
    1424:	01 97       	sbiw	r24, 0x01	; 1
    1426:	98 ab       	std	Y+48, r25	; 0x30
    1428:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    142a:	8f a5       	ldd	r24, Y+47	; 0x2f
    142c:	98 a9       	ldd	r25, Y+48	; 0x30
    142e:	00 97       	sbiw	r24, 0x00	; 0
    1430:	69 f7       	brne	.-38     	; 0x140c <LCD_displayCharacter+0xb4>
    1432:	14 c0       	rjmp	.+40     	; 0x145c <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1434:	69 a9       	ldd	r22, Y+49	; 0x31
    1436:	7a a9       	ldd	r23, Y+50	; 0x32
    1438:	8b a9       	ldd	r24, Y+51	; 0x33
    143a:	9c a9       	ldd	r25, Y+52	; 0x34
    143c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	98 ab       	std	Y+48, r25	; 0x30
    1446:	8f a7       	std	Y+47, r24	; 0x2f
    1448:	8f a5       	ldd	r24, Y+47	; 0x2f
    144a:	98 a9       	ldd	r25, Y+48	; 0x30
    144c:	9c a7       	std	Y+44, r25	; 0x2c
    144e:	8b a7       	std	Y+43, r24	; 0x2b
    1450:	8b a5       	ldd	r24, Y+43	; 0x2b
    1452:	9c a5       	ldd	r25, Y+44	; 0x2c
    1454:	01 97       	sbiw	r24, 0x01	; 1
    1456:	f1 f7       	brne	.-4      	; 0x1454 <LCD_displayCharacter+0xfc>
    1458:	9c a7       	std	Y+44, r25	; 0x2c
    145a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);       /*delay for tas = 50ns*/
	GPIO_writePin(LCD_EN_PORT_ID ,LCD_EN_PIN_ID,LOGIC_HIGH);
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	62 e0       	ldi	r22, 0x02	; 2
    1460:	41 e0       	ldi	r20, 0x01	; 1
    1462:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <GPIO_writePin>
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	a0 e8       	ldi	r26, 0x80	; 128
    146c:	bf e3       	ldi	r27, 0x3F	; 63
    146e:	8f a3       	std	Y+39, r24	; 0x27
    1470:	98 a7       	std	Y+40, r25	; 0x28
    1472:	a9 a7       	std	Y+41, r26	; 0x29
    1474:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1476:	6f a1       	ldd	r22, Y+39	; 0x27
    1478:	78 a5       	ldd	r23, Y+40	; 0x28
    147a:	89 a5       	ldd	r24, Y+41	; 0x29
    147c:	9a a5       	ldd	r25, Y+42	; 0x2a
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	4a ef       	ldi	r20, 0xFA	; 250
    1484:	54 e4       	ldi	r21, 0x44	; 68
    1486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	8b a3       	std	Y+35, r24	; 0x23
    1490:	9c a3       	std	Y+36, r25	; 0x24
    1492:	ad a3       	std	Y+37, r26	; 0x25
    1494:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1496:	6b a1       	ldd	r22, Y+35	; 0x23
    1498:	7c a1       	ldd	r23, Y+36	; 0x24
    149a:	8d a1       	ldd	r24, Y+37	; 0x25
    149c:	9e a1       	ldd	r25, Y+38	; 0x26
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	40 e8       	ldi	r20, 0x80	; 128
    14a4:	5f e3       	ldi	r21, 0x3F	; 63
    14a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14aa:	88 23       	and	r24, r24
    14ac:	2c f4       	brge	.+10     	; 0x14b8 <LCD_displayCharacter+0x160>
		__ticks = 1;
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	9a a3       	std	Y+34, r25	; 0x22
    14b4:	89 a3       	std	Y+33, r24	; 0x21
    14b6:	3f c0       	rjmp	.+126    	; 0x1536 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    14b8:	6b a1       	ldd	r22, Y+35	; 0x23
    14ba:	7c a1       	ldd	r23, Y+36	; 0x24
    14bc:	8d a1       	ldd	r24, Y+37	; 0x25
    14be:	9e a1       	ldd	r25, Y+38	; 0x26
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	3f ef       	ldi	r19, 0xFF	; 255
    14c4:	4f e7       	ldi	r20, 0x7F	; 127
    14c6:	57 e4       	ldi	r21, 0x47	; 71
    14c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14cc:	18 16       	cp	r1, r24
    14ce:	4c f5       	brge	.+82     	; 0x1522 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14d0:	6f a1       	ldd	r22, Y+39	; 0x27
    14d2:	78 a5       	ldd	r23, Y+40	; 0x28
    14d4:	89 a5       	ldd	r24, Y+41	; 0x29
    14d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	40 e2       	ldi	r20, 0x20	; 32
    14de:	51 e4       	ldi	r21, 0x41	; 65
    14e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	bc 01       	movw	r22, r24
    14ea:	cd 01       	movw	r24, r26
    14ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	9a a3       	std	Y+34, r25	; 0x22
    14f6:	89 a3       	std	Y+33, r24	; 0x21
    14f8:	0f c0       	rjmp	.+30     	; 0x1518 <LCD_displayCharacter+0x1c0>
    14fa:	88 ec       	ldi	r24, 0xC8	; 200
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	98 a3       	std	Y+32, r25	; 0x20
    1500:	8f 8f       	std	Y+31, r24	; 0x1f
    1502:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1504:	98 a1       	ldd	r25, Y+32	; 0x20
    1506:	01 97       	sbiw	r24, 0x01	; 1
    1508:	f1 f7       	brne	.-4      	; 0x1506 <LCD_displayCharacter+0x1ae>
    150a:	98 a3       	std	Y+32, r25	; 0x20
    150c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    150e:	89 a1       	ldd	r24, Y+33	; 0x21
    1510:	9a a1       	ldd	r25, Y+34	; 0x22
    1512:	01 97       	sbiw	r24, 0x01	; 1
    1514:	9a a3       	std	Y+34, r25	; 0x22
    1516:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1518:	89 a1       	ldd	r24, Y+33	; 0x21
    151a:	9a a1       	ldd	r25, Y+34	; 0x22
    151c:	00 97       	sbiw	r24, 0x00	; 0
    151e:	69 f7       	brne	.-38     	; 0x14fa <LCD_displayCharacter+0x1a2>
    1520:	14 c0       	rjmp	.+40     	; 0x154a <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1522:	6b a1       	ldd	r22, Y+35	; 0x23
    1524:	7c a1       	ldd	r23, Y+36	; 0x24
    1526:	8d a1       	ldd	r24, Y+37	; 0x25
    1528:	9e a1       	ldd	r25, Y+38	; 0x26
    152a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	9a a3       	std	Y+34, r25	; 0x22
    1534:	89 a3       	std	Y+33, r24	; 0x21
    1536:	89 a1       	ldd	r24, Y+33	; 0x21
    1538:	9a a1       	ldd	r25, Y+34	; 0x22
    153a:	9e 8f       	std	Y+30, r25	; 0x1e
    153c:	8d 8f       	std	Y+29, r24	; 0x1d
    153e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1540:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	f1 f7       	brne	.-4      	; 0x1542 <LCD_displayCharacter+0x1ea>
    1546:	9e 8f       	std	Y+30, r25	; 0x1e
    1548:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(character,3));
	_delay_ms(1);           /*delay for tdsw=100ns*/
	GPIO_writePin(LCD_EN_PORT_ID ,LCD_EN_PIN_ID,LOGIC_LOW);
	_delay_ms(1);           /*delay for th=13ns */
#else
	GPIO_writePort(LCD_DATA_PORT_ID,character);
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	69 ad       	ldd	r22, Y+57	; 0x39
    154e:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <GPIO_writePort>
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	a0 e8       	ldi	r26, 0x80	; 128
    1558:	bf e3       	ldi	r27, 0x3F	; 63
    155a:	89 8f       	std	Y+25, r24	; 0x19
    155c:	9a 8f       	std	Y+26, r25	; 0x1a
    155e:	ab 8f       	std	Y+27, r26	; 0x1b
    1560:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1562:	69 8d       	ldd	r22, Y+25	; 0x19
    1564:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1566:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1568:	9c 8d       	ldd	r25, Y+28	; 0x1c
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	4a ef       	ldi	r20, 0xFA	; 250
    1570:	54 e4       	ldi	r21, 0x44	; 68
    1572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1576:	dc 01       	movw	r26, r24
    1578:	cb 01       	movw	r24, r22
    157a:	8d 8b       	std	Y+21, r24	; 0x15
    157c:	9e 8b       	std	Y+22, r25	; 0x16
    157e:	af 8b       	std	Y+23, r26	; 0x17
    1580:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1582:	6d 89       	ldd	r22, Y+21	; 0x15
    1584:	7e 89       	ldd	r23, Y+22	; 0x16
    1586:	8f 89       	ldd	r24, Y+23	; 0x17
    1588:	98 8d       	ldd	r25, Y+24	; 0x18
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	40 e8       	ldi	r20, 0x80	; 128
    1590:	5f e3       	ldi	r21, 0x3F	; 63
    1592:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1596:	88 23       	and	r24, r24
    1598:	2c f4       	brge	.+10     	; 0x15a4 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	9c 8b       	std	Y+20, r25	; 0x14
    15a0:	8b 8b       	std	Y+19, r24	; 0x13
    15a2:	3f c0       	rjmp	.+126    	; 0x1622 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    15a4:	6d 89       	ldd	r22, Y+21	; 0x15
    15a6:	7e 89       	ldd	r23, Y+22	; 0x16
    15a8:	8f 89       	ldd	r24, Y+23	; 0x17
    15aa:	98 8d       	ldd	r25, Y+24	; 0x18
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	3f ef       	ldi	r19, 0xFF	; 255
    15b0:	4f e7       	ldi	r20, 0x7F	; 127
    15b2:	57 e4       	ldi	r21, 0x47	; 71
    15b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15b8:	18 16       	cp	r1, r24
    15ba:	4c f5       	brge	.+82     	; 0x160e <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15bc:	69 8d       	ldd	r22, Y+25	; 0x19
    15be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	40 e2       	ldi	r20, 0x20	; 32
    15ca:	51 e4       	ldi	r21, 0x41	; 65
    15cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	bc 01       	movw	r22, r24
    15d6:	cd 01       	movw	r24, r26
    15d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	9c 8b       	std	Y+20, r25	; 0x14
    15e2:	8b 8b       	std	Y+19, r24	; 0x13
    15e4:	0f c0       	rjmp	.+30     	; 0x1604 <LCD_displayCharacter+0x2ac>
    15e6:	88 ec       	ldi	r24, 0xC8	; 200
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	9a 8b       	std	Y+18, r25	; 0x12
    15ec:	89 8b       	std	Y+17, r24	; 0x11
    15ee:	89 89       	ldd	r24, Y+17	; 0x11
    15f0:	9a 89       	ldd	r25, Y+18	; 0x12
    15f2:	01 97       	sbiw	r24, 0x01	; 1
    15f4:	f1 f7       	brne	.-4      	; 0x15f2 <LCD_displayCharacter+0x29a>
    15f6:	9a 8b       	std	Y+18, r25	; 0x12
    15f8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15fa:	8b 89       	ldd	r24, Y+19	; 0x13
    15fc:	9c 89       	ldd	r25, Y+20	; 0x14
    15fe:	01 97       	sbiw	r24, 0x01	; 1
    1600:	9c 8b       	std	Y+20, r25	; 0x14
    1602:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1604:	8b 89       	ldd	r24, Y+19	; 0x13
    1606:	9c 89       	ldd	r25, Y+20	; 0x14
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	69 f7       	brne	.-38     	; 0x15e6 <LCD_displayCharacter+0x28e>
    160c:	14 c0       	rjmp	.+40     	; 0x1636 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    160e:	6d 89       	ldd	r22, Y+21	; 0x15
    1610:	7e 89       	ldd	r23, Y+22	; 0x16
    1612:	8f 89       	ldd	r24, Y+23	; 0x17
    1614:	98 8d       	ldd	r25, Y+24	; 0x18
    1616:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	9c 8b       	std	Y+20, r25	; 0x14
    1620:	8b 8b       	std	Y+19, r24	; 0x13
    1622:	8b 89       	ldd	r24, Y+19	; 0x13
    1624:	9c 89       	ldd	r25, Y+20	; 0x14
    1626:	98 8b       	std	Y+16, r25	; 0x10
    1628:	8f 87       	std	Y+15, r24	; 0x0f
    162a:	8f 85       	ldd	r24, Y+15	; 0x0f
    162c:	98 89       	ldd	r25, Y+16	; 0x10
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	f1 f7       	brne	.-4      	; 0x162e <LCD_displayCharacter+0x2d6>
    1632:	98 8b       	std	Y+16, r25	; 0x10
    1634:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);         /*delay for tdsw=100ns*/
	GPIO_writePin(LCD_EN_PORT_ID ,LCD_EN_PIN_ID,LOGIC_LOW);
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	62 e0       	ldi	r22, 0x02	; 2
    163a:	40 e0       	ldi	r20, 0x00	; 0
    163c:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <GPIO_writePin>
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	a0 e8       	ldi	r26, 0x80	; 128
    1646:	bf e3       	ldi	r27, 0x3F	; 63
    1648:	8b 87       	std	Y+11, r24	; 0x0b
    164a:	9c 87       	std	Y+12, r25	; 0x0c
    164c:	ad 87       	std	Y+13, r26	; 0x0d
    164e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1650:	6b 85       	ldd	r22, Y+11	; 0x0b
    1652:	7c 85       	ldd	r23, Y+12	; 0x0c
    1654:	8d 85       	ldd	r24, Y+13	; 0x0d
    1656:	9e 85       	ldd	r25, Y+14	; 0x0e
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	4a ef       	ldi	r20, 0xFA	; 250
    165e:	54 e4       	ldi	r21, 0x44	; 68
    1660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	8f 83       	std	Y+7, r24	; 0x07
    166a:	98 87       	std	Y+8, r25	; 0x08
    166c:	a9 87       	std	Y+9, r26	; 0x09
    166e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1670:	6f 81       	ldd	r22, Y+7	; 0x07
    1672:	78 85       	ldd	r23, Y+8	; 0x08
    1674:	89 85       	ldd	r24, Y+9	; 0x09
    1676:	9a 85       	ldd	r25, Y+10	; 0x0a
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	40 e8       	ldi	r20, 0x80	; 128
    167e:	5f e3       	ldi	r21, 0x3F	; 63
    1680:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1684:	88 23       	and	r24, r24
    1686:	2c f4       	brge	.+10     	; 0x1692 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	9e 83       	std	Y+6, r25	; 0x06
    168e:	8d 83       	std	Y+5, r24	; 0x05
    1690:	3f c0       	rjmp	.+126    	; 0x1710 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1692:	6f 81       	ldd	r22, Y+7	; 0x07
    1694:	78 85       	ldd	r23, Y+8	; 0x08
    1696:	89 85       	ldd	r24, Y+9	; 0x09
    1698:	9a 85       	ldd	r25, Y+10	; 0x0a
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	3f ef       	ldi	r19, 0xFF	; 255
    169e:	4f e7       	ldi	r20, 0x7F	; 127
    16a0:	57 e4       	ldi	r21, 0x47	; 71
    16a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16a6:	18 16       	cp	r1, r24
    16a8:	4c f5       	brge	.+82     	; 0x16fc <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    16b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	40 e2       	ldi	r20, 0x20	; 32
    16b8:	51 e4       	ldi	r21, 0x41	; 65
    16ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	bc 01       	movw	r22, r24
    16c4:	cd 01       	movw	r24, r26
    16c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ca:	dc 01       	movw	r26, r24
    16cc:	cb 01       	movw	r24, r22
    16ce:	9e 83       	std	Y+6, r25	; 0x06
    16d0:	8d 83       	std	Y+5, r24	; 0x05
    16d2:	0f c0       	rjmp	.+30     	; 0x16f2 <LCD_displayCharacter+0x39a>
    16d4:	88 ec       	ldi	r24, 0xC8	; 200
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	9c 83       	std	Y+4, r25	; 0x04
    16da:	8b 83       	std	Y+3, r24	; 0x03
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	9c 81       	ldd	r25, Y+4	; 0x04
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	f1 f7       	brne	.-4      	; 0x16e0 <LCD_displayCharacter+0x388>
    16e4:	9c 83       	std	Y+4, r25	; 0x04
    16e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ea:	9e 81       	ldd	r25, Y+6	; 0x06
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	9e 83       	std	Y+6, r25	; 0x06
    16f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f2:	8d 81       	ldd	r24, Y+5	; 0x05
    16f4:	9e 81       	ldd	r25, Y+6	; 0x06
    16f6:	00 97       	sbiw	r24, 0x00	; 0
    16f8:	69 f7       	brne	.-38     	; 0x16d4 <LCD_displayCharacter+0x37c>
    16fa:	14 c0       	rjmp	.+40     	; 0x1724 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16fc:	6f 81       	ldd	r22, Y+7	; 0x07
    16fe:	78 85       	ldd	r23, Y+8	; 0x08
    1700:	89 85       	ldd	r24, Y+9	; 0x09
    1702:	9a 85       	ldd	r25, Y+10	; 0x0a
    1704:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1708:	dc 01       	movw	r26, r24
    170a:	cb 01       	movw	r24, r22
    170c:	9e 83       	std	Y+6, r25	; 0x06
    170e:	8d 83       	std	Y+5, r24	; 0x05
    1710:	8d 81       	ldd	r24, Y+5	; 0x05
    1712:	9e 81       	ldd	r25, Y+6	; 0x06
    1714:	9a 83       	std	Y+2, r25	; 0x02
    1716:	89 83       	std	Y+1, r24	; 0x01
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	9a 81       	ldd	r25, Y+2	; 0x02
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	f1 f7       	brne	.-4      	; 0x171c <LCD_displayCharacter+0x3c4>
    1720:	9a 83       	std	Y+2, r25	; 0x02
    1722:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);           /*delay for th=13ns */
#endif
}
    1724:	e9 96       	adiw	r28, 0x39	; 57
    1726:	0f b6       	in	r0, 0x3f	; 63
    1728:	f8 94       	cli
    172a:	de bf       	out	0x3e, r29	; 62
    172c:	0f be       	out	0x3f, r0	; 63
    172e:	cd bf       	out	0x3d, r28	; 61
    1730:	cf 91       	pop	r28
    1732:	df 91       	pop	r29
    1734:	08 95       	ret

00001736 <LCD_displayString>:
/*display the string to screen*/
void LCD_displayString(const uint8 * str){
    1736:	df 93       	push	r29
    1738:	cf 93       	push	r28
    173a:	00 d0       	rcall	.+0      	; 0x173c <LCD_displayString+0x6>
    173c:	0f 92       	push	r0
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
    1742:	9b 83       	std	Y+3, r25	; 0x03
    1744:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    1746:	19 82       	std	Y+1, r1	; 0x01
    1748:	0e c0       	rjmp	.+28     	; 0x1766 <LCD_displayString+0x30>
	while(str[i]!='\0'){
		LCD_displayCharacter(str[i]);       //call the function display
    174a:	89 81       	ldd	r24, Y+1	; 0x01
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	9b 81       	ldd	r25, Y+3	; 0x03
    1754:	fc 01       	movw	r30, r24
    1756:	e2 0f       	add	r30, r18
    1758:	f3 1f       	adc	r31, r19
    175a:	80 81       	ld	r24, Z
    175c:	0e 94 ac 09 	call	0x1358	; 0x1358 <LCD_displayCharacter>
		i++;
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	8f 5f       	subi	r24, 0xFF	; 255
    1764:	89 83       	std	Y+1, r24	; 0x01
#endif
}
/*display the string to screen*/
void LCD_displayString(const uint8 * str){
	uint8 i=0;
	while(str[i]!='\0'){
    1766:	89 81       	ldd	r24, Y+1	; 0x01
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	8a 81       	ldd	r24, Y+2	; 0x02
    176e:	9b 81       	ldd	r25, Y+3	; 0x03
    1770:	fc 01       	movw	r30, r24
    1772:	e2 0f       	add	r30, r18
    1774:	f3 1f       	adc	r31, r19
    1776:	80 81       	ld	r24, Z
    1778:	88 23       	and	r24, r24
    177a:	39 f7       	brne	.-50     	; 0x174a <LCD_displayString+0x14>
		LCD_displayCharacter(str[i]);       //call the function display
		i++;
	}
}
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	08 95       	ret

00001788 <LCD_moveCursor>:
/* Move the Cursor to specific location*/
void LCD_moveCursor(uint8 row,uint8 col){
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	00 d0       	rcall	.+0      	; 0x178e <LCD_moveCursor+0x6>
    178e:	00 d0       	rcall	.+0      	; 0x1790 <LCD_moveCursor+0x8>
    1790:	0f 92       	push	r0
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
    1796:	8a 83       	std	Y+2, r24	; 0x02
    1798:	6b 83       	std	Y+3, r22	; 0x03
	uint8 location;
	/* configuration to detect the specific location*/
	switch(row){
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	28 2f       	mov	r18, r24
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	3d 83       	std	Y+5, r19	; 0x05
    17a2:	2c 83       	std	Y+4, r18	; 0x04
    17a4:	8c 81       	ldd	r24, Y+4	; 0x04
    17a6:	9d 81       	ldd	r25, Y+5	; 0x05
    17a8:	81 30       	cpi	r24, 0x01	; 1
    17aa:	91 05       	cpc	r25, r1
    17ac:	c1 f0       	breq	.+48     	; 0x17de <LCD_moveCursor+0x56>
    17ae:	2c 81       	ldd	r18, Y+4	; 0x04
    17b0:	3d 81       	ldd	r19, Y+5	; 0x05
    17b2:	22 30       	cpi	r18, 0x02	; 2
    17b4:	31 05       	cpc	r19, r1
    17b6:	2c f4       	brge	.+10     	; 0x17c2 <LCD_moveCursor+0x3a>
    17b8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ba:	9d 81       	ldd	r25, Y+5	; 0x05
    17bc:	00 97       	sbiw	r24, 0x00	; 0
    17be:	61 f0       	breq	.+24     	; 0x17d8 <LCD_moveCursor+0x50>
    17c0:	19 c0       	rjmp	.+50     	; 0x17f4 <LCD_moveCursor+0x6c>
    17c2:	2c 81       	ldd	r18, Y+4	; 0x04
    17c4:	3d 81       	ldd	r19, Y+5	; 0x05
    17c6:	22 30       	cpi	r18, 0x02	; 2
    17c8:	31 05       	cpc	r19, r1
    17ca:	69 f0       	breq	.+26     	; 0x17e6 <LCD_moveCursor+0x5e>
    17cc:	8c 81       	ldd	r24, Y+4	; 0x04
    17ce:	9d 81       	ldd	r25, Y+5	; 0x05
    17d0:	83 30       	cpi	r24, 0x03	; 3
    17d2:	91 05       	cpc	r25, r1
    17d4:	61 f0       	breq	.+24     	; 0x17ee <LCD_moveCursor+0x66>
    17d6:	0e c0       	rjmp	.+28     	; 0x17f4 <LCD_moveCursor+0x6c>
	case 0:
		location=col;                /*the First row*/
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	89 83       	std	Y+1, r24	; 0x01
    17dc:	0b c0       	rjmp	.+22     	; 0x17f4 <LCD_moveCursor+0x6c>
		break;
	case 1:
	   location=col+0x40;           /*to go the second row*/
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	80 5c       	subi	r24, 0xC0	; 192
    17e2:	89 83       	std	Y+1, r24	; 0x01
    17e4:	07 c0       	rjmp	.+14     	; 0x17f4 <LCD_moveCursor+0x6c>
	   break;
	case 2:
	   location=col+0x10;           /*to go the Third row*/
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	80 5f       	subi	r24, 0xF0	; 240
    17ea:	89 83       	std	Y+1, r24	; 0x01
    17ec:	03 c0       	rjmp	.+6      	; 0x17f4 <LCD_moveCursor+0x6c>
	   break;
	case 3:
	   location=col+0x50;            /*to go the Fourth row*/
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	80 5b       	subi	r24, 0xB0	; 176
    17f2:	89 83       	std	Y+1, r24	; 0x01
	   break;
	}
	/* LCD_SET_CURSOR_LOCATION ---> to the LCD_sendCommand under stand that is address*/
	LCD_sendCommand(location | LCD_SET_CURSOR_LOCATION );
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	80 68       	ori	r24, 0x80	; 128
    17f8:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_sendCommand>
}
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	cf 91       	pop	r28
    1808:	df 91       	pop	r29
    180a:	08 95       	ret

0000180c <LCD_displayStringRowColumn>:
/* display string at begin of specific location*/
void LCD_displayStringRowColumn(uint8 row,uint8 col,uint8* st_row_col){
    180c:	df 93       	push	r29
    180e:	cf 93       	push	r28
    1810:	00 d0       	rcall	.+0      	; 0x1812 <LCD_displayStringRowColumn+0x6>
    1812:	00 d0       	rcall	.+0      	; 0x1814 <LCD_displayStringRowColumn+0x8>
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    1818:	89 83       	std	Y+1, r24	; 0x01
    181a:	6a 83       	std	Y+2, r22	; 0x02
    181c:	5c 83       	std	Y+4, r21	; 0x04
    181e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);
    1820:	89 81       	ldd	r24, Y+1	; 0x01
    1822:	6a 81       	ldd	r22, Y+2	; 0x02
    1824:	0e 94 c4 0b 	call	0x1788	; 0x1788 <LCD_moveCursor>
	LCD_displayString(st_row_col);
    1828:	8b 81       	ldd	r24, Y+3	; 0x03
    182a:	9c 81       	ldd	r25, Y+4	; 0x04
    182c:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LCD_displayString>
}
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	0f 90       	pop	r0
    1836:	0f 90       	pop	r0
    1838:	cf 91       	pop	r28
    183a:	df 91       	pop	r29
    183c:	08 95       	ret

0000183e <LCD_intgerToString>:
/* to display the numbers*/
void LCD_intgerToString(int num){
    183e:	df 93       	push	r29
    1840:	cf 93       	push	r28
    1842:	cd b7       	in	r28, 0x3d	; 61
    1844:	de b7       	in	r29, 0x3e	; 62
    1846:	62 97       	sbiw	r28, 0x12	; 18
    1848:	0f b6       	in	r0, 0x3f	; 63
    184a:	f8 94       	cli
    184c:	de bf       	out	0x3e, r29	; 62
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	cd bf       	out	0x3d, r28	; 61
    1852:	9a 8b       	std	Y+18, r25	; 0x12
    1854:	89 8b       	std	Y+17, r24	; 0x11
	 char buff[16];              /* String to hold the ascii result */
	 itoa(num,buff,10);          /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1856:	89 89       	ldd	r24, Y+17	; 0x11
    1858:	9a 89       	ldd	r25, Y+18	; 0x12
    185a:	9e 01       	movw	r18, r28
    185c:	2f 5f       	subi	r18, 0xFF	; 255
    185e:	3f 4f       	sbci	r19, 0xFF	; 255
    1860:	b9 01       	movw	r22, r18
    1862:	4a e0       	ldi	r20, 0x0A	; 10
    1864:	50 e0       	ldi	r21, 0x00	; 0
    1866:	0e 94 24 12 	call	0x2448	; 0x2448 <itoa>
	 LCD_displayString(buff);    /* Display the string */
    186a:	ce 01       	movw	r24, r28
    186c:	01 96       	adiw	r24, 0x01	; 1
    186e:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LCD_displayString>
}
    1872:	62 96       	adiw	r28, 0x12	; 18
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	f8 94       	cli
    1878:	de bf       	out	0x3e, r29	; 62
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	cd bf       	out	0x3d, r28	; 61
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	08 95       	ret

00001884 <LCD_clearScreen>:
/*to clear the screen*/
void LCD_clearScreen(void){
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_sendCommand>
}
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	08 95       	ret

00001898 <main>:
#include "LCD.h"     /*to use the LCD to display the required distance*/
#include <avr/io.h> /*to use SREG register to active the interrupt*/
#include <util/delay.h>  /*to use the delay function*/
/*global variable to count the number of edges*/
uint8 g_edgcount=0;
int main(void){
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	00 d0       	rcall	.+0      	; 0x189e <main+0x6>
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
	uint16 required_distance;  /*the required distance*/
	SREG|=(1<<7);               /*to active the global Interrupt*/
    18a2:	af e5       	ldi	r26, 0x5F	; 95
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	ef e5       	ldi	r30, 0x5F	; 95
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	80 68       	ori	r24, 0x80	; 128
    18ae:	8c 93       	st	X, r24
	LCD_init();                /*to active the LCD*/
    18b0:	0e 94 17 07 	call	0xe2e	; 0xe2e <LCD_init>
	LCD_displayString("Distance=    cm"); /*to display this string*/
    18b4:	80 e6       	ldi	r24, 0x60	; 96
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LCD_displayString>
	ULTRASONIC_init();                             /*to active the Ultersonic sensor*/
    18bc:	0e 94 a5 10 	call	0x214a	; 0x214a <ULTRASONIC_init>
	required_distance=ULTRASONIC_readDistance();   /*to get the the required distance*/
    18c0:	0e 94 9b 11 	call	0x2336	; 0x2336 <ULTRASONIC_readDistance>
    18c4:	9a 83       	std	Y+2, r25	; 0x02
    18c6:	89 83       	std	Y+1, r24	; 0x01
	while(1){
		if(g_edgcount==2){    /*to measure the time between rising and falling*/
    18c8:	80 91 78 01 	lds	r24, 0x0178
    18cc:	82 30       	cpi	r24, 0x02	; 2
    18ce:	71 f4       	brne	.+28     	; 0x18ec <main+0x54>
			g_edgcount=0;
    18d0:	10 92 78 01 	sts	0x0178, r1
			LCD_moveCursor(0,10);    /*to display the distance in this location*/
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	6a e0       	ldi	r22, 0x0A	; 10
    18d8:	0e 94 c4 0b 	call	0x1788	; 0x1788 <LCD_moveCursor>
			LCD_intgerToString((uint32)required_distance);
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	9a 81       	ldd	r25, Y+2	; 0x02
    18e0:	0e 94 1f 0c 	call	0x183e	; 0x183e <LCD_intgerToString>
			required_distance=ULTRASONIC_readDistance();
    18e4:	0e 94 9b 11 	call	0x2336	; 0x2336 <ULTRASONIC_readDistance>
    18e8:	9a 83       	std	Y+2, r25	; 0x02
    18ea:	89 83       	std	Y+1, r24	; 0x01
	      }
		if(required_distance<10){
    18ec:	89 81       	ldd	r24, Y+1	; 0x01
    18ee:	9a 81       	ldd	r25, Y+2	; 0x02
    18f0:	8a 30       	cpi	r24, 0x0A	; 10
    18f2:	91 05       	cpc	r25, r1
    18f4:	38 f4       	brcc	.+14     	; 0x1904 <main+0x6c>
			LCD_moveCursor(0,11);
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	6b e0       	ldi	r22, 0x0B	; 11
    18fa:	0e 94 c4 0b 	call	0x1788	; 0x1788 <LCD_moveCursor>
			LCD_displayCharacter(' ');   /*to remove this number in this location*/
    18fe:	80 e2       	ldi	r24, 0x20	; 32
    1900:	0e 94 ac 09 	call	0x1358	; 0x1358 <LCD_displayCharacter>
		}
		if(required_distance<100){
    1904:	89 81       	ldd	r24, Y+1	; 0x01
    1906:	9a 81       	ldd	r25, Y+2	; 0x02
    1908:	84 36       	cpi	r24, 0x64	; 100
    190a:	91 05       	cpc	r25, r1
    190c:	e8 f6       	brcc	.-70     	; 0x18c8 <main+0x30>
			LCD_moveCursor(0,12);
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	6c e0       	ldi	r22, 0x0C	; 12
    1912:	0e 94 c4 0b 	call	0x1788	; 0x1788 <LCD_moveCursor>
			LCD_displayCharacter(' ');          /*to remove this number in this location*/
    1916:	80 e2       	ldi	r24, 0x20	; 32
    1918:	0e 94 ac 09 	call	0x1358	; 0x1358 <LCD_displayCharacter>
    191c:	d5 cf       	rjmp	.-86     	; 0x18c8 <main+0x30>

0000191e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	00 d0       	rcall	.+0      	; 0x1924 <GPIO_setupPinDirection+0x6>
    1924:	00 d0       	rcall	.+0      	; 0x1926 <GPIO_setupPinDirection+0x8>
    1926:	0f 92       	push	r0
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
    192c:	89 83       	std	Y+1, r24	; 0x01
    192e:	6a 83       	std	Y+2, r22	; 0x02
    1930:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1932:	8a 81       	ldd	r24, Y+2	; 0x02
    1934:	88 30       	cpi	r24, 0x08	; 8
    1936:	08 f0       	brcs	.+2      	; 0x193a <GPIO_setupPinDirection+0x1c>
    1938:	d5 c0       	rjmp	.+426    	; 0x1ae4 <GPIO_setupPinDirection+0x1c6>
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	84 30       	cpi	r24, 0x04	; 4
    193e:	08 f0       	brcs	.+2      	; 0x1942 <GPIO_setupPinDirection+0x24>
    1940:	d1 c0       	rjmp	.+418    	; 0x1ae4 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	28 2f       	mov	r18, r24
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	3d 83       	std	Y+5, r19	; 0x05
    194a:	2c 83       	std	Y+4, r18	; 0x04
    194c:	8c 81       	ldd	r24, Y+4	; 0x04
    194e:	9d 81       	ldd	r25, Y+5	; 0x05
    1950:	81 30       	cpi	r24, 0x01	; 1
    1952:	91 05       	cpc	r25, r1
    1954:	09 f4       	brne	.+2      	; 0x1958 <GPIO_setupPinDirection+0x3a>
    1956:	43 c0       	rjmp	.+134    	; 0x19de <GPIO_setupPinDirection+0xc0>
    1958:	2c 81       	ldd	r18, Y+4	; 0x04
    195a:	3d 81       	ldd	r19, Y+5	; 0x05
    195c:	22 30       	cpi	r18, 0x02	; 2
    195e:	31 05       	cpc	r19, r1
    1960:	2c f4       	brge	.+10     	; 0x196c <GPIO_setupPinDirection+0x4e>
    1962:	8c 81       	ldd	r24, Y+4	; 0x04
    1964:	9d 81       	ldd	r25, Y+5	; 0x05
    1966:	00 97       	sbiw	r24, 0x00	; 0
    1968:	71 f0       	breq	.+28     	; 0x1986 <GPIO_setupPinDirection+0x68>
    196a:	bc c0       	rjmp	.+376    	; 0x1ae4 <GPIO_setupPinDirection+0x1c6>
    196c:	2c 81       	ldd	r18, Y+4	; 0x04
    196e:	3d 81       	ldd	r19, Y+5	; 0x05
    1970:	22 30       	cpi	r18, 0x02	; 2
    1972:	31 05       	cpc	r19, r1
    1974:	09 f4       	brne	.+2      	; 0x1978 <GPIO_setupPinDirection+0x5a>
    1976:	5f c0       	rjmp	.+190    	; 0x1a36 <GPIO_setupPinDirection+0x118>
    1978:	8c 81       	ldd	r24, Y+4	; 0x04
    197a:	9d 81       	ldd	r25, Y+5	; 0x05
    197c:	83 30       	cpi	r24, 0x03	; 3
    197e:	91 05       	cpc	r25, r1
    1980:	09 f4       	brne	.+2      	; 0x1984 <GPIO_setupPinDirection+0x66>
    1982:	85 c0       	rjmp	.+266    	; 0x1a8e <GPIO_setupPinDirection+0x170>
    1984:	af c0       	rjmp	.+350    	; 0x1ae4 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1986:	8b 81       	ldd	r24, Y+3	; 0x03
    1988:	81 30       	cpi	r24, 0x01	; 1
    198a:	a1 f4       	brne	.+40     	; 0x19b4 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    198c:	aa e3       	ldi	r26, 0x3A	; 58
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	ea e3       	ldi	r30, 0x3A	; 58
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	48 2f       	mov	r20, r24
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	28 2f       	mov	r18, r24
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	02 2e       	mov	r0, r18
    19a4:	02 c0       	rjmp	.+4      	; 0x19aa <GPIO_setupPinDirection+0x8c>
    19a6:	88 0f       	add	r24, r24
    19a8:	99 1f       	adc	r25, r25
    19aa:	0a 94       	dec	r0
    19ac:	e2 f7       	brpl	.-8      	; 0x19a6 <GPIO_setupPinDirection+0x88>
    19ae:	84 2b       	or	r24, r20
    19b0:	8c 93       	st	X, r24
    19b2:	98 c0       	rjmp	.+304    	; 0x1ae4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    19b4:	aa e3       	ldi	r26, 0x3A	; 58
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	ea e3       	ldi	r30, 0x3A	; 58
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	48 2f       	mov	r20, r24
    19c0:	8a 81       	ldd	r24, Y+2	; 0x02
    19c2:	28 2f       	mov	r18, r24
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	02 2e       	mov	r0, r18
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <GPIO_setupPinDirection+0xb4>
    19ce:	88 0f       	add	r24, r24
    19d0:	99 1f       	adc	r25, r25
    19d2:	0a 94       	dec	r0
    19d4:	e2 f7       	brpl	.-8      	; 0x19ce <GPIO_setupPinDirection+0xb0>
    19d6:	80 95       	com	r24
    19d8:	84 23       	and	r24, r20
    19da:	8c 93       	st	X, r24
    19dc:	83 c0       	rjmp	.+262    	; 0x1ae4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	81 30       	cpi	r24, 0x01	; 1
    19e2:	a1 f4       	brne	.+40     	; 0x1a0c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    19e4:	a7 e3       	ldi	r26, 0x37	; 55
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e7 e3       	ldi	r30, 0x37	; 55
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	48 2f       	mov	r20, r24
    19f0:	8a 81       	ldd	r24, Y+2	; 0x02
    19f2:	28 2f       	mov	r18, r24
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	02 2e       	mov	r0, r18
    19fc:	02 c0       	rjmp	.+4      	; 0x1a02 <GPIO_setupPinDirection+0xe4>
    19fe:	88 0f       	add	r24, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	0a 94       	dec	r0
    1a04:	e2 f7       	brpl	.-8      	; 0x19fe <GPIO_setupPinDirection+0xe0>
    1a06:	84 2b       	or	r24, r20
    1a08:	8c 93       	st	X, r24
    1a0a:	6c c0       	rjmp	.+216    	; 0x1ae4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1a0c:	a7 e3       	ldi	r26, 0x37	; 55
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	e7 e3       	ldi	r30, 0x37	; 55
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	48 2f       	mov	r20, r24
    1a18:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1a:	28 2f       	mov	r18, r24
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	02 2e       	mov	r0, r18
    1a24:	02 c0       	rjmp	.+4      	; 0x1a2a <GPIO_setupPinDirection+0x10c>
    1a26:	88 0f       	add	r24, r24
    1a28:	99 1f       	adc	r25, r25
    1a2a:	0a 94       	dec	r0
    1a2c:	e2 f7       	brpl	.-8      	; 0x1a26 <GPIO_setupPinDirection+0x108>
    1a2e:	80 95       	com	r24
    1a30:	84 23       	and	r24, r20
    1a32:	8c 93       	st	X, r24
    1a34:	57 c0       	rjmp	.+174    	; 0x1ae4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1a36:	8b 81       	ldd	r24, Y+3	; 0x03
    1a38:	81 30       	cpi	r24, 0x01	; 1
    1a3a:	a1 f4       	brne	.+40     	; 0x1a64 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1a3c:	a4 e3       	ldi	r26, 0x34	; 52
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	e4 e3       	ldi	r30, 0x34	; 52
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	48 2f       	mov	r20, r24
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	28 2f       	mov	r18, r24
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	02 2e       	mov	r0, r18
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <GPIO_setupPinDirection+0x13c>
    1a56:	88 0f       	add	r24, r24
    1a58:	99 1f       	adc	r25, r25
    1a5a:	0a 94       	dec	r0
    1a5c:	e2 f7       	brpl	.-8      	; 0x1a56 <GPIO_setupPinDirection+0x138>
    1a5e:	84 2b       	or	r24, r20
    1a60:	8c 93       	st	X, r24
    1a62:	40 c0       	rjmp	.+128    	; 0x1ae4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1a64:	a4 e3       	ldi	r26, 0x34	; 52
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	e4 e3       	ldi	r30, 0x34	; 52
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	48 2f       	mov	r20, r24
    1a70:	8a 81       	ldd	r24, Y+2	; 0x02
    1a72:	28 2f       	mov	r18, r24
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	02 2e       	mov	r0, r18
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <GPIO_setupPinDirection+0x164>
    1a7e:	88 0f       	add	r24, r24
    1a80:	99 1f       	adc	r25, r25
    1a82:	0a 94       	dec	r0
    1a84:	e2 f7       	brpl	.-8      	; 0x1a7e <GPIO_setupPinDirection+0x160>
    1a86:	80 95       	com	r24
    1a88:	84 23       	and	r24, r20
    1a8a:	8c 93       	st	X, r24
    1a8c:	2b c0       	rjmp	.+86     	; 0x1ae4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a90:	81 30       	cpi	r24, 0x01	; 1
    1a92:	a1 f4       	brne	.+40     	; 0x1abc <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1a94:	a1 e3       	ldi	r26, 0x31	; 49
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	e1 e3       	ldi	r30, 0x31	; 49
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	48 2f       	mov	r20, r24
    1aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa2:	28 2f       	mov	r18, r24
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	02 2e       	mov	r0, r18
    1aac:	02 c0       	rjmp	.+4      	; 0x1ab2 <GPIO_setupPinDirection+0x194>
    1aae:	88 0f       	add	r24, r24
    1ab0:	99 1f       	adc	r25, r25
    1ab2:	0a 94       	dec	r0
    1ab4:	e2 f7       	brpl	.-8      	; 0x1aae <GPIO_setupPinDirection+0x190>
    1ab6:	84 2b       	or	r24, r20
    1ab8:	8c 93       	st	X, r24
    1aba:	14 c0       	rjmp	.+40     	; 0x1ae4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1abc:	a1 e3       	ldi	r26, 0x31	; 49
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	e1 e3       	ldi	r30, 0x31	; 49
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	48 2f       	mov	r20, r24
    1ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aca:	28 2f       	mov	r18, r24
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	02 2e       	mov	r0, r18
    1ad4:	02 c0       	rjmp	.+4      	; 0x1ada <GPIO_setupPinDirection+0x1bc>
    1ad6:	88 0f       	add	r24, r24
    1ad8:	99 1f       	adc	r25, r25
    1ada:	0a 94       	dec	r0
    1adc:	e2 f7       	brpl	.-8      	; 0x1ad6 <GPIO_setupPinDirection+0x1b8>
    1ade:	80 95       	com	r24
    1ae0:	84 23       	and	r24, r20
    1ae2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	cf 91       	pop	r28
    1af0:	df 91       	pop	r29
    1af2:	08 95       	ret

00001af4 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1af4:	df 93       	push	r29
    1af6:	cf 93       	push	r28
    1af8:	00 d0       	rcall	.+0      	; 0x1afa <GPIO_writePin+0x6>
    1afa:	00 d0       	rcall	.+0      	; 0x1afc <GPIO_writePin+0x8>
    1afc:	0f 92       	push	r0
    1afe:	cd b7       	in	r28, 0x3d	; 61
    1b00:	de b7       	in	r29, 0x3e	; 62
    1b02:	89 83       	std	Y+1, r24	; 0x01
    1b04:	6a 83       	std	Y+2, r22	; 0x02
    1b06:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	88 30       	cpi	r24, 0x08	; 8
    1b0c:	08 f0       	brcs	.+2      	; 0x1b10 <GPIO_writePin+0x1c>
    1b0e:	d5 c0       	rjmp	.+426    	; 0x1cba <GPIO_writePin+0x1c6>
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	84 30       	cpi	r24, 0x04	; 4
    1b14:	08 f0       	brcs	.+2      	; 0x1b18 <GPIO_writePin+0x24>
    1b16:	d1 c0       	rjmp	.+418    	; 0x1cba <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1b18:	89 81       	ldd	r24, Y+1	; 0x01
    1b1a:	28 2f       	mov	r18, r24
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	3d 83       	std	Y+5, r19	; 0x05
    1b20:	2c 83       	std	Y+4, r18	; 0x04
    1b22:	8c 81       	ldd	r24, Y+4	; 0x04
    1b24:	9d 81       	ldd	r25, Y+5	; 0x05
    1b26:	81 30       	cpi	r24, 0x01	; 1
    1b28:	91 05       	cpc	r25, r1
    1b2a:	09 f4       	brne	.+2      	; 0x1b2e <GPIO_writePin+0x3a>
    1b2c:	43 c0       	rjmp	.+134    	; 0x1bb4 <GPIO_writePin+0xc0>
    1b2e:	2c 81       	ldd	r18, Y+4	; 0x04
    1b30:	3d 81       	ldd	r19, Y+5	; 0x05
    1b32:	22 30       	cpi	r18, 0x02	; 2
    1b34:	31 05       	cpc	r19, r1
    1b36:	2c f4       	brge	.+10     	; 0x1b42 <GPIO_writePin+0x4e>
    1b38:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3c:	00 97       	sbiw	r24, 0x00	; 0
    1b3e:	71 f0       	breq	.+28     	; 0x1b5c <GPIO_writePin+0x68>
    1b40:	bc c0       	rjmp	.+376    	; 0x1cba <GPIO_writePin+0x1c6>
    1b42:	2c 81       	ldd	r18, Y+4	; 0x04
    1b44:	3d 81       	ldd	r19, Y+5	; 0x05
    1b46:	22 30       	cpi	r18, 0x02	; 2
    1b48:	31 05       	cpc	r19, r1
    1b4a:	09 f4       	brne	.+2      	; 0x1b4e <GPIO_writePin+0x5a>
    1b4c:	5f c0       	rjmp	.+190    	; 0x1c0c <GPIO_writePin+0x118>
    1b4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b50:	9d 81       	ldd	r25, Y+5	; 0x05
    1b52:	83 30       	cpi	r24, 0x03	; 3
    1b54:	91 05       	cpc	r25, r1
    1b56:	09 f4       	brne	.+2      	; 0x1b5a <GPIO_writePin+0x66>
    1b58:	85 c0       	rjmp	.+266    	; 0x1c64 <GPIO_writePin+0x170>
    1b5a:	af c0       	rjmp	.+350    	; 0x1cba <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	81 30       	cpi	r24, 0x01	; 1
    1b60:	a1 f4       	brne	.+40     	; 0x1b8a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1b62:	ab e3       	ldi	r26, 0x3B	; 59
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	eb e3       	ldi	r30, 0x3B	; 59
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	48 2f       	mov	r20, r24
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	28 2f       	mov	r18, r24
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	02 2e       	mov	r0, r18
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <GPIO_writePin+0x8c>
    1b7c:	88 0f       	add	r24, r24
    1b7e:	99 1f       	adc	r25, r25
    1b80:	0a 94       	dec	r0
    1b82:	e2 f7       	brpl	.-8      	; 0x1b7c <GPIO_writePin+0x88>
    1b84:	84 2b       	or	r24, r20
    1b86:	8c 93       	st	X, r24
    1b88:	98 c0       	rjmp	.+304    	; 0x1cba <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1b8a:	ab e3       	ldi	r26, 0x3B	; 59
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	eb e3       	ldi	r30, 0x3B	; 59
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	48 2f       	mov	r20, r24
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	02 2e       	mov	r0, r18
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <GPIO_writePin+0xb4>
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	0a 94       	dec	r0
    1baa:	e2 f7       	brpl	.-8      	; 0x1ba4 <GPIO_writePin+0xb0>
    1bac:	80 95       	com	r24
    1bae:	84 23       	and	r24, r20
    1bb0:	8c 93       	st	X, r24
    1bb2:	83 c0       	rjmp	.+262    	; 0x1cba <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	81 30       	cpi	r24, 0x01	; 1
    1bb8:	a1 f4       	brne	.+40     	; 0x1be2 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1bba:	a8 e3       	ldi	r26, 0x38	; 56
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	e8 e3       	ldi	r30, 0x38	; 56
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	48 2f       	mov	r20, r24
    1bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc8:	28 2f       	mov	r18, r24
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	02 2e       	mov	r0, r18
    1bd2:	02 c0       	rjmp	.+4      	; 0x1bd8 <GPIO_writePin+0xe4>
    1bd4:	88 0f       	add	r24, r24
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	0a 94       	dec	r0
    1bda:	e2 f7       	brpl	.-8      	; 0x1bd4 <GPIO_writePin+0xe0>
    1bdc:	84 2b       	or	r24, r20
    1bde:	8c 93       	st	X, r24
    1be0:	6c c0       	rjmp	.+216    	; 0x1cba <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1be2:	a8 e3       	ldi	r26, 0x38	; 56
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	e8 e3       	ldi	r30, 0x38	; 56
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	48 2f       	mov	r20, r24
    1bee:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf0:	28 2f       	mov	r18, r24
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	02 2e       	mov	r0, r18
    1bfa:	02 c0       	rjmp	.+4      	; 0x1c00 <GPIO_writePin+0x10c>
    1bfc:	88 0f       	add	r24, r24
    1bfe:	99 1f       	adc	r25, r25
    1c00:	0a 94       	dec	r0
    1c02:	e2 f7       	brpl	.-8      	; 0x1bfc <GPIO_writePin+0x108>
    1c04:	80 95       	com	r24
    1c06:	84 23       	and	r24, r20
    1c08:	8c 93       	st	X, r24
    1c0a:	57 c0       	rjmp	.+174    	; 0x1cba <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0e:	81 30       	cpi	r24, 0x01	; 1
    1c10:	a1 f4       	brne	.+40     	; 0x1c3a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1c12:	a5 e3       	ldi	r26, 0x35	; 53
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	e5 e3       	ldi	r30, 0x35	; 53
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	48 2f       	mov	r20, r24
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	02 2e       	mov	r0, r18
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <GPIO_writePin+0x13c>
    1c2c:	88 0f       	add	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	0a 94       	dec	r0
    1c32:	e2 f7       	brpl	.-8      	; 0x1c2c <GPIO_writePin+0x138>
    1c34:	84 2b       	or	r24, r20
    1c36:	8c 93       	st	X, r24
    1c38:	40 c0       	rjmp	.+128    	; 0x1cba <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1c3a:	a5 e3       	ldi	r26, 0x35	; 53
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	e5 e3       	ldi	r30, 0x35	; 53
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	48 2f       	mov	r20, r24
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	28 2f       	mov	r18, r24
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	02 2e       	mov	r0, r18
    1c52:	02 c0       	rjmp	.+4      	; 0x1c58 <GPIO_writePin+0x164>
    1c54:	88 0f       	add	r24, r24
    1c56:	99 1f       	adc	r25, r25
    1c58:	0a 94       	dec	r0
    1c5a:	e2 f7       	brpl	.-8      	; 0x1c54 <GPIO_writePin+0x160>
    1c5c:	80 95       	com	r24
    1c5e:	84 23       	and	r24, r20
    1c60:	8c 93       	st	X, r24
    1c62:	2b c0       	rjmp	.+86     	; 0x1cba <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1c64:	8b 81       	ldd	r24, Y+3	; 0x03
    1c66:	81 30       	cpi	r24, 0x01	; 1
    1c68:	a1 f4       	brne	.+40     	; 0x1c92 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1c6a:	a2 e3       	ldi	r26, 0x32	; 50
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	e2 e3       	ldi	r30, 0x32	; 50
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	48 2f       	mov	r20, r24
    1c76:	8a 81       	ldd	r24, Y+2	; 0x02
    1c78:	28 2f       	mov	r18, r24
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	02 2e       	mov	r0, r18
    1c82:	02 c0       	rjmp	.+4      	; 0x1c88 <GPIO_writePin+0x194>
    1c84:	88 0f       	add	r24, r24
    1c86:	99 1f       	adc	r25, r25
    1c88:	0a 94       	dec	r0
    1c8a:	e2 f7       	brpl	.-8      	; 0x1c84 <GPIO_writePin+0x190>
    1c8c:	84 2b       	or	r24, r20
    1c8e:	8c 93       	st	X, r24
    1c90:	14 c0       	rjmp	.+40     	; 0x1cba <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1c92:	a2 e3       	ldi	r26, 0x32	; 50
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	e2 e3       	ldi	r30, 0x32	; 50
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	48 2f       	mov	r20, r24
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	28 2f       	mov	r18, r24
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	02 2e       	mov	r0, r18
    1caa:	02 c0       	rjmp	.+4      	; 0x1cb0 <GPIO_writePin+0x1bc>
    1cac:	88 0f       	add	r24, r24
    1cae:	99 1f       	adc	r25, r25
    1cb0:	0a 94       	dec	r0
    1cb2:	e2 f7       	brpl	.-8      	; 0x1cac <GPIO_writePin+0x1b8>
    1cb4:	80 95       	com	r24
    1cb6:	84 23       	and	r24, r20
    1cb8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
    1cc4:	cf 91       	pop	r28
    1cc6:	df 91       	pop	r29
    1cc8:	08 95       	ret

00001cca <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1cca:	df 93       	push	r29
    1ccc:	cf 93       	push	r28
    1cce:	00 d0       	rcall	.+0      	; 0x1cd0 <GPIO_readPin+0x6>
    1cd0:	00 d0       	rcall	.+0      	; 0x1cd2 <GPIO_readPin+0x8>
    1cd2:	0f 92       	push	r0
    1cd4:	cd b7       	in	r28, 0x3d	; 61
    1cd6:	de b7       	in	r29, 0x3e	; 62
    1cd8:	8a 83       	std	Y+2, r24	; 0x02
    1cda:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1cdc:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	88 30       	cpi	r24, 0x08	; 8
    1ce2:	08 f0       	brcs	.+2      	; 0x1ce6 <GPIO_readPin+0x1c>
    1ce4:	84 c0       	rjmp	.+264    	; 0x1dee <GPIO_readPin+0x124>
    1ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce8:	84 30       	cpi	r24, 0x04	; 4
    1cea:	08 f0       	brcs	.+2      	; 0x1cee <GPIO_readPin+0x24>
    1cec:	80 c0       	rjmp	.+256    	; 0x1dee <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1cee:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf0:	28 2f       	mov	r18, r24
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	3d 83       	std	Y+5, r19	; 0x05
    1cf6:	2c 83       	std	Y+4, r18	; 0x04
    1cf8:	4c 81       	ldd	r20, Y+4	; 0x04
    1cfa:	5d 81       	ldd	r21, Y+5	; 0x05
    1cfc:	41 30       	cpi	r20, 0x01	; 1
    1cfe:	51 05       	cpc	r21, r1
    1d00:	79 f1       	breq	.+94     	; 0x1d60 <GPIO_readPin+0x96>
    1d02:	8c 81       	ldd	r24, Y+4	; 0x04
    1d04:	9d 81       	ldd	r25, Y+5	; 0x05
    1d06:	82 30       	cpi	r24, 0x02	; 2
    1d08:	91 05       	cpc	r25, r1
    1d0a:	34 f4       	brge	.+12     	; 0x1d18 <GPIO_readPin+0x4e>
    1d0c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d0e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d10:	21 15       	cp	r18, r1
    1d12:	31 05       	cpc	r19, r1
    1d14:	69 f0       	breq	.+26     	; 0x1d30 <GPIO_readPin+0x66>
    1d16:	6b c0       	rjmp	.+214    	; 0x1dee <GPIO_readPin+0x124>
    1d18:	4c 81       	ldd	r20, Y+4	; 0x04
    1d1a:	5d 81       	ldd	r21, Y+5	; 0x05
    1d1c:	42 30       	cpi	r20, 0x02	; 2
    1d1e:	51 05       	cpc	r21, r1
    1d20:	b9 f1       	breq	.+110    	; 0x1d90 <GPIO_readPin+0xc6>
    1d22:	8c 81       	ldd	r24, Y+4	; 0x04
    1d24:	9d 81       	ldd	r25, Y+5	; 0x05
    1d26:	83 30       	cpi	r24, 0x03	; 3
    1d28:	91 05       	cpc	r25, r1
    1d2a:	09 f4       	brne	.+2      	; 0x1d2e <GPIO_readPin+0x64>
    1d2c:	49 c0       	rjmp	.+146    	; 0x1dc0 <GPIO_readPin+0xf6>
    1d2e:	5f c0       	rjmp	.+190    	; 0x1dee <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1d30:	e9 e3       	ldi	r30, 0x39	; 57
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	28 2f       	mov	r18, r24
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3c:	88 2f       	mov	r24, r24
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	a9 01       	movw	r20, r18
    1d42:	02 c0       	rjmp	.+4      	; 0x1d48 <GPIO_readPin+0x7e>
    1d44:	55 95       	asr	r21
    1d46:	47 95       	ror	r20
    1d48:	8a 95       	dec	r24
    1d4a:	e2 f7       	brpl	.-8      	; 0x1d44 <GPIO_readPin+0x7a>
    1d4c:	ca 01       	movw	r24, r20
    1d4e:	81 70       	andi	r24, 0x01	; 1
    1d50:	90 70       	andi	r25, 0x00	; 0
    1d52:	88 23       	and	r24, r24
    1d54:	19 f0       	breq	.+6      	; 0x1d5c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	89 83       	std	Y+1, r24	; 0x01
    1d5a:	49 c0       	rjmp	.+146    	; 0x1dee <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d5c:	19 82       	std	Y+1, r1	; 0x01
    1d5e:	47 c0       	rjmp	.+142    	; 0x1dee <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1d60:	e6 e3       	ldi	r30, 0x36	; 54
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	28 2f       	mov	r18, r24
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6c:	88 2f       	mov	r24, r24
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	a9 01       	movw	r20, r18
    1d72:	02 c0       	rjmp	.+4      	; 0x1d78 <GPIO_readPin+0xae>
    1d74:	55 95       	asr	r21
    1d76:	47 95       	ror	r20
    1d78:	8a 95       	dec	r24
    1d7a:	e2 f7       	brpl	.-8      	; 0x1d74 <GPIO_readPin+0xaa>
    1d7c:	ca 01       	movw	r24, r20
    1d7e:	81 70       	andi	r24, 0x01	; 1
    1d80:	90 70       	andi	r25, 0x00	; 0
    1d82:	88 23       	and	r24, r24
    1d84:	19 f0       	breq	.+6      	; 0x1d8c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	89 83       	std	Y+1, r24	; 0x01
    1d8a:	31 c0       	rjmp	.+98     	; 0x1dee <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d8c:	19 82       	std	Y+1, r1	; 0x01
    1d8e:	2f c0       	rjmp	.+94     	; 0x1dee <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1d90:	e3 e3       	ldi	r30, 0x33	; 51
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	28 2f       	mov	r18, r24
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9c:	88 2f       	mov	r24, r24
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	a9 01       	movw	r20, r18
    1da2:	02 c0       	rjmp	.+4      	; 0x1da8 <GPIO_readPin+0xde>
    1da4:	55 95       	asr	r21
    1da6:	47 95       	ror	r20
    1da8:	8a 95       	dec	r24
    1daa:	e2 f7       	brpl	.-8      	; 0x1da4 <GPIO_readPin+0xda>
    1dac:	ca 01       	movw	r24, r20
    1dae:	81 70       	andi	r24, 0x01	; 1
    1db0:	90 70       	andi	r25, 0x00	; 0
    1db2:	88 23       	and	r24, r24
    1db4:	19 f0       	breq	.+6      	; 0x1dbc <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	89 83       	std	Y+1, r24	; 0x01
    1dba:	19 c0       	rjmp	.+50     	; 0x1dee <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1dbc:	19 82       	std	Y+1, r1	; 0x01
    1dbe:	17 c0       	rjmp	.+46     	; 0x1dee <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1dc0:	e0 e3       	ldi	r30, 0x30	; 48
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	28 2f       	mov	r18, r24
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	8b 81       	ldd	r24, Y+3	; 0x03
    1dcc:	88 2f       	mov	r24, r24
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	a9 01       	movw	r20, r18
    1dd2:	02 c0       	rjmp	.+4      	; 0x1dd8 <GPIO_readPin+0x10e>
    1dd4:	55 95       	asr	r21
    1dd6:	47 95       	ror	r20
    1dd8:	8a 95       	dec	r24
    1dda:	e2 f7       	brpl	.-8      	; 0x1dd4 <GPIO_readPin+0x10a>
    1ddc:	ca 01       	movw	r24, r20
    1dde:	81 70       	andi	r24, 0x01	; 1
    1de0:	90 70       	andi	r25, 0x00	; 0
    1de2:	88 23       	and	r24, r24
    1de4:	19 f0       	breq	.+6      	; 0x1dec <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	89 83       	std	Y+1, r24	; 0x01
    1dea:	01 c0       	rjmp	.+2      	; 0x1dee <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1dec:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1dee:	89 81       	ldd	r24, Y+1	; 0x01
}
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	08 95       	ret

00001e00 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	00 d0       	rcall	.+0      	; 0x1e06 <GPIO_setupPortDirection+0x6>
    1e06:	00 d0       	rcall	.+0      	; 0x1e08 <GPIO_setupPortDirection+0x8>
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    1e0c:	89 83       	std	Y+1, r24	; 0x01
    1e0e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e10:	89 81       	ldd	r24, Y+1	; 0x01
    1e12:	84 30       	cpi	r24, 0x04	; 4
    1e14:	90 f5       	brcc	.+100    	; 0x1e7a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
    1e18:	28 2f       	mov	r18, r24
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	3c 83       	std	Y+4, r19	; 0x04
    1e1e:	2b 83       	std	Y+3, r18	; 0x03
    1e20:	8b 81       	ldd	r24, Y+3	; 0x03
    1e22:	9c 81       	ldd	r25, Y+4	; 0x04
    1e24:	81 30       	cpi	r24, 0x01	; 1
    1e26:	91 05       	cpc	r25, r1
    1e28:	d1 f0       	breq	.+52     	; 0x1e5e <GPIO_setupPortDirection+0x5e>
    1e2a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e2c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e2e:	22 30       	cpi	r18, 0x02	; 2
    1e30:	31 05       	cpc	r19, r1
    1e32:	2c f4       	brge	.+10     	; 0x1e3e <GPIO_setupPortDirection+0x3e>
    1e34:	8b 81       	ldd	r24, Y+3	; 0x03
    1e36:	9c 81       	ldd	r25, Y+4	; 0x04
    1e38:	00 97       	sbiw	r24, 0x00	; 0
    1e3a:	61 f0       	breq	.+24     	; 0x1e54 <GPIO_setupPortDirection+0x54>
    1e3c:	1e c0       	rjmp	.+60     	; 0x1e7a <GPIO_setupPortDirection+0x7a>
    1e3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e40:	3c 81       	ldd	r19, Y+4	; 0x04
    1e42:	22 30       	cpi	r18, 0x02	; 2
    1e44:	31 05       	cpc	r19, r1
    1e46:	81 f0       	breq	.+32     	; 0x1e68 <GPIO_setupPortDirection+0x68>
    1e48:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4c:	83 30       	cpi	r24, 0x03	; 3
    1e4e:	91 05       	cpc	r25, r1
    1e50:	81 f0       	breq	.+32     	; 0x1e72 <GPIO_setupPortDirection+0x72>
    1e52:	13 c0       	rjmp	.+38     	; 0x1e7a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1e54:	ea e3       	ldi	r30, 0x3A	; 58
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5a:	80 83       	st	Z, r24
    1e5c:	0e c0       	rjmp	.+28     	; 0x1e7a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1e5e:	e7 e3       	ldi	r30, 0x37	; 55
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	8a 81       	ldd	r24, Y+2	; 0x02
    1e64:	80 83       	st	Z, r24
    1e66:	09 c0       	rjmp	.+18     	; 0x1e7a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1e68:	e4 e3       	ldi	r30, 0x34	; 52
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6e:	80 83       	st	Z, r24
    1e70:	04 c0       	rjmp	.+8      	; 0x1e7a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1e72:	e1 e3       	ldi	r30, 0x31	; 49
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	8a 81       	ldd	r24, Y+2	; 0x02
    1e78:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	0f 90       	pop	r0
    1e80:	0f 90       	pop	r0
    1e82:	cf 91       	pop	r28
    1e84:	df 91       	pop	r29
    1e86:	08 95       	ret

00001e88 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1e88:	df 93       	push	r29
    1e8a:	cf 93       	push	r28
    1e8c:	00 d0       	rcall	.+0      	; 0x1e8e <GPIO_writePort+0x6>
    1e8e:	00 d0       	rcall	.+0      	; 0x1e90 <GPIO_writePort+0x8>
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
    1e94:	89 83       	std	Y+1, r24	; 0x01
    1e96:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	84 30       	cpi	r24, 0x04	; 4
    1e9c:	90 f5       	brcc	.+100    	; 0x1f02 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1e9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ea0:	28 2f       	mov	r18, r24
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	3c 83       	std	Y+4, r19	; 0x04
    1ea6:	2b 83       	std	Y+3, r18	; 0x03
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	9c 81       	ldd	r25, Y+4	; 0x04
    1eac:	81 30       	cpi	r24, 0x01	; 1
    1eae:	91 05       	cpc	r25, r1
    1eb0:	d1 f0       	breq	.+52     	; 0x1ee6 <GPIO_writePort+0x5e>
    1eb2:	2b 81       	ldd	r18, Y+3	; 0x03
    1eb4:	3c 81       	ldd	r19, Y+4	; 0x04
    1eb6:	22 30       	cpi	r18, 0x02	; 2
    1eb8:	31 05       	cpc	r19, r1
    1eba:	2c f4       	brge	.+10     	; 0x1ec6 <GPIO_writePort+0x3e>
    1ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebe:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec0:	00 97       	sbiw	r24, 0x00	; 0
    1ec2:	61 f0       	breq	.+24     	; 0x1edc <GPIO_writePort+0x54>
    1ec4:	1e c0       	rjmp	.+60     	; 0x1f02 <GPIO_writePort+0x7a>
    1ec6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ec8:	3c 81       	ldd	r19, Y+4	; 0x04
    1eca:	22 30       	cpi	r18, 0x02	; 2
    1ecc:	31 05       	cpc	r19, r1
    1ece:	81 f0       	breq	.+32     	; 0x1ef0 <GPIO_writePort+0x68>
    1ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed4:	83 30       	cpi	r24, 0x03	; 3
    1ed6:	91 05       	cpc	r25, r1
    1ed8:	81 f0       	breq	.+32     	; 0x1efa <GPIO_writePort+0x72>
    1eda:	13 c0       	rjmp	.+38     	; 0x1f02 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1edc:	eb e3       	ldi	r30, 0x3B	; 59
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee2:	80 83       	st	Z, r24
    1ee4:	0e c0       	rjmp	.+28     	; 0x1f02 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1ee6:	e8 e3       	ldi	r30, 0x38	; 56
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	8a 81       	ldd	r24, Y+2	; 0x02
    1eec:	80 83       	st	Z, r24
    1eee:	09 c0       	rjmp	.+18     	; 0x1f02 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1ef0:	e5 e3       	ldi	r30, 0x35	; 53
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef6:	80 83       	st	Z, r24
    1ef8:	04 c0       	rjmp	.+8      	; 0x1f02 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1efa:	e2 e3       	ldi	r30, 0x32	; 50
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	8a 81       	ldd	r24, Y+2	; 0x02
    1f00:	80 83       	st	Z, r24
			break;
		}
	}
}
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	cf 91       	pop	r28
    1f0c:	df 91       	pop	r29
    1f0e:	08 95       	ret

00001f10 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1f10:	df 93       	push	r29
    1f12:	cf 93       	push	r28
    1f14:	00 d0       	rcall	.+0      	; 0x1f16 <GPIO_readPort+0x6>
    1f16:	00 d0       	rcall	.+0      	; 0x1f18 <GPIO_readPort+0x8>
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1f1e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1f20:	8a 81       	ldd	r24, Y+2	; 0x02
    1f22:	84 30       	cpi	r24, 0x04	; 4
    1f24:	90 f5       	brcc	.+100    	; 0x1f8a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1f26:	8a 81       	ldd	r24, Y+2	; 0x02
    1f28:	28 2f       	mov	r18, r24
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	3c 83       	std	Y+4, r19	; 0x04
    1f2e:	2b 83       	std	Y+3, r18	; 0x03
    1f30:	8b 81       	ldd	r24, Y+3	; 0x03
    1f32:	9c 81       	ldd	r25, Y+4	; 0x04
    1f34:	81 30       	cpi	r24, 0x01	; 1
    1f36:	91 05       	cpc	r25, r1
    1f38:	d1 f0       	breq	.+52     	; 0x1f6e <GPIO_readPort+0x5e>
    1f3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f3c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f3e:	22 30       	cpi	r18, 0x02	; 2
    1f40:	31 05       	cpc	r19, r1
    1f42:	2c f4       	brge	.+10     	; 0x1f4e <GPIO_readPort+0x3e>
    1f44:	8b 81       	ldd	r24, Y+3	; 0x03
    1f46:	9c 81       	ldd	r25, Y+4	; 0x04
    1f48:	00 97       	sbiw	r24, 0x00	; 0
    1f4a:	61 f0       	breq	.+24     	; 0x1f64 <GPIO_readPort+0x54>
    1f4c:	1e c0       	rjmp	.+60     	; 0x1f8a <GPIO_readPort+0x7a>
    1f4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f50:	3c 81       	ldd	r19, Y+4	; 0x04
    1f52:	22 30       	cpi	r18, 0x02	; 2
    1f54:	31 05       	cpc	r19, r1
    1f56:	81 f0       	breq	.+32     	; 0x1f78 <GPIO_readPort+0x68>
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5c:	83 30       	cpi	r24, 0x03	; 3
    1f5e:	91 05       	cpc	r25, r1
    1f60:	81 f0       	breq	.+32     	; 0x1f82 <GPIO_readPort+0x72>
    1f62:	13 c0       	rjmp	.+38     	; 0x1f8a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1f64:	e9 e3       	ldi	r30, 0x39	; 57
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	89 83       	std	Y+1, r24	; 0x01
    1f6c:	0e c0       	rjmp	.+28     	; 0x1f8a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1f6e:	e6 e3       	ldi	r30, 0x36	; 54
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	89 83       	std	Y+1, r24	; 0x01
    1f76:	09 c0       	rjmp	.+18     	; 0x1f8a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1f78:	e3 e3       	ldi	r30, 0x33	; 51
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	89 83       	std	Y+1, r24	; 0x01
    1f80:	04 c0       	rjmp	.+8      	; 0x1f8a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1f82:	e0 e3       	ldi	r30, 0x30	; 48
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1f8a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	cf 91       	pop	r28
    1f96:	df 91       	pop	r29
    1f98:	08 95       	ret

00001f9a <__vector_6>:
#include <avr/interrupt.h>
#include "common_macros.h"
#include "gpio.h"
static volatile void (*g_Timer1_Call_Back_Ptr)(void)=NULL_PTR;
/*handl the Interrupt*/
ISR(TIMER1_CAPT_vect){
    1f9a:	1f 92       	push	r1
    1f9c:	0f 92       	push	r0
    1f9e:	0f b6       	in	r0, 0x3f	; 63
    1fa0:	0f 92       	push	r0
    1fa2:	11 24       	eor	r1, r1
    1fa4:	2f 93       	push	r18
    1fa6:	3f 93       	push	r19
    1fa8:	4f 93       	push	r20
    1faa:	5f 93       	push	r21
    1fac:	6f 93       	push	r22
    1fae:	7f 93       	push	r23
    1fb0:	8f 93       	push	r24
    1fb2:	9f 93       	push	r25
    1fb4:	af 93       	push	r26
    1fb6:	bf 93       	push	r27
    1fb8:	ef 93       	push	r30
    1fba:	ff 93       	push	r31
    1fbc:	df 93       	push	r29
    1fbe:	cf 93       	push	r28
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_Call_Back_Ptr !=NULL_PTR){
    1fc4:	80 91 79 01 	lds	r24, 0x0179
    1fc8:	90 91 7a 01 	lds	r25, 0x017A
    1fcc:	00 97       	sbiw	r24, 0x00	; 0
    1fce:	29 f0       	breq	.+10     	; 0x1fda <__vector_6+0x40>
		(*g_Timer1_Call_Back_Ptr)();
    1fd0:	e0 91 79 01 	lds	r30, 0x0179
    1fd4:	f0 91 7a 01 	lds	r31, 0x017A
    1fd8:	09 95       	icall
	}
}
    1fda:	cf 91       	pop	r28
    1fdc:	df 91       	pop	r29
    1fde:	ff 91       	pop	r31
    1fe0:	ef 91       	pop	r30
    1fe2:	bf 91       	pop	r27
    1fe4:	af 91       	pop	r26
    1fe6:	9f 91       	pop	r25
    1fe8:	8f 91       	pop	r24
    1fea:	7f 91       	pop	r23
    1fec:	6f 91       	pop	r22
    1fee:	5f 91       	pop	r21
    1ff0:	4f 91       	pop	r20
    1ff2:	3f 91       	pop	r19
    1ff4:	2f 91       	pop	r18
    1ff6:	0f 90       	pop	r0
    1ff8:	0f be       	out	0x3f, r0	; 63
    1ffa:	0f 90       	pop	r0
    1ffc:	1f 90       	pop	r1
    1ffe:	18 95       	reti

00002000 <ICU_init>:
/*
 * Function_Name: ICU_init
 * Description:-
 * Initialize the Input capture unit
 */
void ICU_init(const ICU_Config* config){
    2000:	df 93       	push	r29
    2002:	cf 93       	push	r28
    2004:	00 d0       	rcall	.+0      	; 0x2006 <ICU_init+0x6>
    2006:	0f 92       	push	r0
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62
    200c:	9a 83       	std	Y+2, r25	; 0x02
    200e:	89 83       	std	Y+1, r24	; 0x01
	/*to set the icp1 as input*/
	GPIO_setupPinDirection(ICU_ICP1_PORT_ID ,ICU_ICP1_PIN_ID, PIN_INPUT);
    2010:	83 e0       	ldi	r24, 0x03	; 3
    2012:	66 e0       	ldi	r22, 0x06	; 6
    2014:	40 e0       	ldi	r20, 0x00	; 0
    2016:	0e 94 8f 0c 	call	0x191e	; 0x191e <GPIO_setupPinDirection>
	TCNT1=0;              /*counter register*/
    201a:	ec e4       	ldi	r30, 0x4C	; 76
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	11 82       	std	Z+1, r1	; 0x01
    2020:	10 82       	st	Z, r1
	ICR1=0;               /*initialize the InputCapture PIN*/
    2022:	e6 e4       	ldi	r30, 0x46	; 70
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	11 82       	std	Z+1, r1	; 0x01
    2028:	10 82       	st	Z, r1
	TCCR1A =(1<<FOC1A)|(1<<FOC1B);  /*to use normal mode*/
    202a:	ef e4       	ldi	r30, 0x4F	; 79
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	8c e0       	ldi	r24, 0x0C	; 12
    2030:	80 83       	st	Z, r24
	/*set the required clock and edge*/
	TCCR1B=(TCCR1B & 0)|((config->edg)<<ICES1)|(config->clock);
    2032:	ee e4       	ldi	r30, 0x4E	; 78
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	ae e4       	ldi	r26, 0x4E	; 78
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	e9 81       	ldd	r30, Y+1	; 0x01
    203e:	fa 81       	ldd	r31, Y+2	; 0x02
    2040:	80 81       	ld	r24, Z
    2042:	88 2f       	mov	r24, r24
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	9c 01       	movw	r18, r24
    2048:	00 24       	eor	r0, r0
    204a:	36 95       	lsr	r19
    204c:	27 95       	ror	r18
    204e:	07 94       	ror	r0
    2050:	36 95       	lsr	r19
    2052:	27 95       	ror	r18
    2054:	07 94       	ror	r0
    2056:	32 2f       	mov	r19, r18
    2058:	20 2d       	mov	r18, r0
    205a:	e9 81       	ldd	r30, Y+1	; 0x01
    205c:	fa 81       	ldd	r31, Y+2	; 0x02
    205e:	81 81       	ldd	r24, Z+1	; 0x01
    2060:	88 2f       	mov	r24, r24
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	82 2b       	or	r24, r18
    2066:	93 2b       	or	r25, r19
    2068:	8c 93       	st	X, r24
	/*Enable the Interrupt*/
	TIMSK|=(1<<TICIE1);
    206a:	a9 e5       	ldi	r26, 0x59	; 89
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	e9 e5       	ldi	r30, 0x59	; 89
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	80 62       	ori	r24, 0x20	; 32
    2076:	8c 93       	st	X, r24
}
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	cf 91       	pop	r28
    2080:	df 91       	pop	r29
    2082:	08 95       	ret

00002084 <Timer1_setCallBack>:
/*
 * Function_Name: ICU_setCallBack
 * Description:-
 * to keep the address of call back function in a global pointer to function
 */
void Timer1_setCallBack(void(*icu_ptr)(void)){
    2084:	df 93       	push	r29
    2086:	cf 93       	push	r28
    2088:	00 d0       	rcall	.+0      	; 0x208a <Timer1_setCallBack+0x6>
    208a:	cd b7       	in	r28, 0x3d	; 61
    208c:	de b7       	in	r29, 0x3e	; 62
    208e:	9a 83       	std	Y+2, r25	; 0x02
    2090:	89 83       	std	Y+1, r24	; 0x01
	g_Timer1_Call_Back_Ptr=icu_ptr;
    2092:	89 81       	ldd	r24, Y+1	; 0x01
    2094:	9a 81       	ldd	r25, Y+2	; 0x02
    2096:	90 93 7a 01 	sts	0x017A, r25
    209a:	80 93 79 01 	sts	0x0179, r24
}
    209e:	0f 90       	pop	r0
    20a0:	0f 90       	pop	r0
    20a2:	cf 91       	pop	r28
    20a4:	df 91       	pop	r29
    20a6:	08 95       	ret

000020a8 <ICU_setEdge>:
/*
 * Function_Name: ICU_setEdge
 * Description:-
 * to set the required edge
 */
void ICU_setEdge(const ICU_edge edge){
    20a8:	df 93       	push	r29
    20aa:	cf 93       	push	r28
    20ac:	0f 92       	push	r0
    20ae:	cd b7       	in	r28, 0x3d	; 61
    20b0:	de b7       	in	r29, 0x3e	; 62
    20b2:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = (TCCR1B&0xBF) |(edge<<ICES1);
    20b4:	ae e4       	ldi	r26, 0x4E	; 78
    20b6:	b0 e0       	ldi	r27, 0x00	; 0
    20b8:	ee e4       	ldi	r30, 0x4E	; 78
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	28 2f       	mov	r18, r24
    20c0:	2f 7b       	andi	r18, 0xBF	; 191
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	88 2f       	mov	r24, r24
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	00 24       	eor	r0, r0
    20ca:	96 95       	lsr	r25
    20cc:	87 95       	ror	r24
    20ce:	07 94       	ror	r0
    20d0:	96 95       	lsr	r25
    20d2:	87 95       	ror	r24
    20d4:	07 94       	ror	r0
    20d6:	98 2f       	mov	r25, r24
    20d8:	80 2d       	mov	r24, r0
    20da:	82 2b       	or	r24, r18
    20dc:	8c 93       	st	X, r24
}
    20de:	0f 90       	pop	r0
    20e0:	cf 91       	pop	r28
    20e2:	df 91       	pop	r29
    20e4:	08 95       	ret

000020e6 <ICU_getInputCapture>:
/*
 * Function_Name: ICU_getInputCapture
 * Description:-
 * to get the value of input capture
 */
uint16 ICU_getInputCapture(void){
    20e6:	df 93       	push	r29
    20e8:	cf 93       	push	r28
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    20ee:	e6 e4       	ldi	r30, 0x46	; 70
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	91 81       	ldd	r25, Z+1	; 0x01
}
    20f6:	cf 91       	pop	r28
    20f8:	df 91       	pop	r29
    20fa:	08 95       	ret

000020fc <ICU_clearTimer>:
/*
 * Function_Name: clearTimer
 * Description:-
 * to clear the value of register counter(TCNT1)
 */
void ICU_clearTimer(void){
    20fc:	df 93       	push	r29
    20fe:	cf 93       	push	r28
    2100:	cd b7       	in	r28, 0x3d	; 61
    2102:	de b7       	in	r29, 0x3e	; 62
	TCNT1=0;
    2104:	ec e4       	ldi	r30, 0x4C	; 76
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	11 82       	std	Z+1, r1	; 0x01
    210a:	10 82       	st	Z, r1
}
    210c:	cf 91       	pop	r28
    210e:	df 91       	pop	r29
    2110:	08 95       	ret

00002112 <ICU_DeInit>:
/*
 * Function_Name: ICU_DeInit
 * Description:-
 * to stop the timer1
 */
void ICU_DeInit(void){
    2112:	df 93       	push	r29
    2114:	cf 93       	push	r28
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
	ICR1=0;
    211a:	e6 e4       	ldi	r30, 0x46	; 70
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	11 82       	std	Z+1, r1	; 0x01
    2120:	10 82       	st	Z, r1
	TCNT1=0;
    2122:	ec e4       	ldi	r30, 0x4C	; 76
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	11 82       	std	Z+1, r1	; 0x01
    2128:	10 82       	st	Z, r1
	TCCR1A=0;
    212a:	ef e4       	ldi	r30, 0x4F	; 79
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	10 82       	st	Z, r1
	TCCR1B=0;
    2130:	ee e4       	ldi	r30, 0x4E	; 78
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	10 82       	st	Z, r1
	TIMSK &= ~(1<<TICIE1);
    2136:	a9 e5       	ldi	r26, 0x59	; 89
    2138:	b0 e0       	ldi	r27, 0x00	; 0
    213a:	e9 e5       	ldi	r30, 0x59	; 89
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	8f 7d       	andi	r24, 0xDF	; 223
    2142:	8c 93       	st	X, r24
}
    2144:	cf 91       	pop	r28
    2146:	df 91       	pop	r29
    2148:	08 95       	ret

0000214a <ULTRASONIC_init>:
 * 1-setup the Ultrasonic sensor
 *
 * 2- Setup the direction for the trigger pin as output pin.
 *
 */
void ULTRASONIC_init(void){
    214a:	df 93       	push	r29
    214c:	cf 93       	push	r28
    214e:	00 d0       	rcall	.+0      	; 0x2150 <ULTRASONIC_init+0x6>
    2150:	cd b7       	in	r28, 0x3d	; 61
    2152:	de b7       	in	r29, 0x3e	; 62
	/*config the ICU_MODEL  as Required*/
	ICU_Config Icu_Conf;
	Icu_Conf.clock=F_CPU_8;
    2154:	82 e0       	ldi	r24, 0x02	; 2
    2156:	8a 83       	std	Y+2, r24	; 0x02
	Icu_Conf.edg=rising;
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	89 83       	std	Y+1, r24	; 0x01
	ICU_init(&Icu_Conf);
    215c:	ce 01       	movw	r24, r28
    215e:	01 96       	adiw	r24, 0x01	; 1
    2160:	0e 94 00 10 	call	0x2000	; 0x2000 <ICU_init>
	Timer1_setCallBack(ULTRASONIC_edgeProcessing);
    2164:	88 ec       	ldi	r24, 0xC8	; 200
    2166:	91 e1       	ldi	r25, 0x11	; 17
    2168:	0e 94 42 10 	call	0x2084	; 0x2084 <Timer1_setCallBack>
	/*setup the Pin Trigger as Ouput pin*/
	GPIO_setupPinDirection(ULTRASONIC_TRIGGER_PORT_ID ,ULTRASONIC_TRIGGER_PIN_ID, PIN_OUTPUT);
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	65 e0       	ldi	r22, 0x05	; 5
    2170:	41 e0       	ldi	r20, 0x01	; 1
    2172:	0e 94 8f 0c 	call	0x191e	; 0x191e <GPIO_setupPinDirection>

}
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	cf 91       	pop	r28
    217c:	df 91       	pop	r29
    217e:	08 95       	ret

00002180 <ULTRASONIC_trigger>:
* Description:
*
* Send the Trigger pulse to the ultrasoni.
*
*/
static void ULTRASONIC_trigger(void){
    2180:	df 93       	push	r29
    2182:	cf 93       	push	r28
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
    2188:	68 97       	sbiw	r28, 0x18	; 24
    218a:	0f b6       	in	r0, 0x3f	; 63
    218c:	f8 94       	cli
    218e:	de bf       	out	0x3e, r29	; 62
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	cd bf       	out	0x3d, r28	; 61
	GPIO_writePin(ULTRASONIC_TRIGGER_PORT_ID ,ULTRASONIC_TRIGGER_PIN_ID, LOGIC_HIGH);
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	65 e0       	ldi	r22, 0x05	; 5
    2198:	41 e0       	ldi	r20, 0x01	; 1
    219a:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <GPIO_writePin>
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	a0 e7       	ldi	r26, 0x70	; 112
    21a4:	b1 e4       	ldi	r27, 0x41	; 65
    21a6:	8d 8b       	std	Y+21, r24	; 0x15
    21a8:	9e 8b       	std	Y+22, r25	; 0x16
    21aa:	af 8b       	std	Y+23, r26	; 0x17
    21ac:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21ae:	6d 89       	ldd	r22, Y+21	; 0x15
    21b0:	7e 89       	ldd	r23, Y+22	; 0x16
    21b2:	8f 89       	ldd	r24, Y+23	; 0x17
    21b4:	98 8d       	ldd	r25, Y+24	; 0x18
    21b6:	2b ea       	ldi	r18, 0xAB	; 171
    21b8:	3a ea       	ldi	r19, 0xAA	; 170
    21ba:	4a e2       	ldi	r20, 0x2A	; 42
    21bc:	50 e4       	ldi	r21, 0x40	; 64
    21be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	89 8b       	std	Y+17, r24	; 0x11
    21c8:	9a 8b       	std	Y+18, r25	; 0x12
    21ca:	ab 8b       	std	Y+19, r26	; 0x13
    21cc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    21ce:	69 89       	ldd	r22, Y+17	; 0x11
    21d0:	7a 89       	ldd	r23, Y+18	; 0x12
    21d2:	8b 89       	ldd	r24, Y+19	; 0x13
    21d4:	9c 89       	ldd	r25, Y+20	; 0x14
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	40 e8       	ldi	r20, 0x80	; 128
    21dc:	5f e3       	ldi	r21, 0x3F	; 63
    21de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21e2:	88 23       	and	r24, r24
    21e4:	1c f4       	brge	.+6      	; 0x21ec <ULTRASONIC_trigger+0x6c>
		__ticks = 1;
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	88 8b       	std	Y+16, r24	; 0x10
    21ea:	91 c0       	rjmp	.+290    	; 0x230e <ULTRASONIC_trigger+0x18e>
	else if (__tmp > 255)
    21ec:	69 89       	ldd	r22, Y+17	; 0x11
    21ee:	7a 89       	ldd	r23, Y+18	; 0x12
    21f0:	8b 89       	ldd	r24, Y+19	; 0x13
    21f2:	9c 89       	ldd	r25, Y+20	; 0x14
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	4f e7       	ldi	r20, 0x7F	; 127
    21fa:	53 e4       	ldi	r21, 0x43	; 67
    21fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2200:	18 16       	cp	r1, r24
    2202:	0c f0       	brlt	.+2      	; 0x2206 <ULTRASONIC_trigger+0x86>
    2204:	7b c0       	rjmp	.+246    	; 0x22fc <ULTRASONIC_trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    2206:	6d 89       	ldd	r22, Y+21	; 0x15
    2208:	7e 89       	ldd	r23, Y+22	; 0x16
    220a:	8f 89       	ldd	r24, Y+23	; 0x17
    220c:	98 8d       	ldd	r25, Y+24	; 0x18
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	4a e7       	ldi	r20, 0x7A	; 122
    2214:	54 e4       	ldi	r21, 0x44	; 68
    2216:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	8c 87       	std	Y+12, r24	; 0x0c
    2220:	9d 87       	std	Y+13, r25	; 0x0d
    2222:	ae 87       	std	Y+14, r26	; 0x0e
    2224:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2226:	6c 85       	ldd	r22, Y+12	; 0x0c
    2228:	7d 85       	ldd	r23, Y+13	; 0x0d
    222a:	8e 85       	ldd	r24, Y+14	; 0x0e
    222c:	9f 85       	ldd	r25, Y+15	; 0x0f
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	4a ef       	ldi	r20, 0xFA	; 250
    2234:	54 e4       	ldi	r21, 0x44	; 68
    2236:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	88 87       	std	Y+8, r24	; 0x08
    2240:	99 87       	std	Y+9, r25	; 0x09
    2242:	aa 87       	std	Y+10, r26	; 0x0a
    2244:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2246:	68 85       	ldd	r22, Y+8	; 0x08
    2248:	79 85       	ldd	r23, Y+9	; 0x09
    224a:	8a 85       	ldd	r24, Y+10	; 0x0a
    224c:	9b 85       	ldd	r25, Y+11	; 0x0b
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	40 e8       	ldi	r20, 0x80	; 128
    2254:	5f e3       	ldi	r21, 0x3F	; 63
    2256:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    225a:	88 23       	and	r24, r24
    225c:	2c f4       	brge	.+10     	; 0x2268 <ULTRASONIC_trigger+0xe8>
		__ticks = 1;
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	9f 83       	std	Y+7, r25	; 0x07
    2264:	8e 83       	std	Y+6, r24	; 0x06
    2266:	3f c0       	rjmp	.+126    	; 0x22e6 <ULTRASONIC_trigger+0x166>
	else if (__tmp > 65535)
    2268:	68 85       	ldd	r22, Y+8	; 0x08
    226a:	79 85       	ldd	r23, Y+9	; 0x09
    226c:	8a 85       	ldd	r24, Y+10	; 0x0a
    226e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	3f ef       	ldi	r19, 0xFF	; 255
    2274:	4f e7       	ldi	r20, 0x7F	; 127
    2276:	57 e4       	ldi	r21, 0x47	; 71
    2278:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    227c:	18 16       	cp	r1, r24
    227e:	4c f5       	brge	.+82     	; 0x22d2 <ULTRASONIC_trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2280:	6c 85       	ldd	r22, Y+12	; 0x0c
    2282:	7d 85       	ldd	r23, Y+13	; 0x0d
    2284:	8e 85       	ldd	r24, Y+14	; 0x0e
    2286:	9f 85       	ldd	r25, Y+15	; 0x0f
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e2       	ldi	r20, 0x20	; 32
    228e:	51 e4       	ldi	r21, 0x41	; 65
    2290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	bc 01       	movw	r22, r24
    229a:	cd 01       	movw	r24, r26
    229c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	9f 83       	std	Y+7, r25	; 0x07
    22a6:	8e 83       	std	Y+6, r24	; 0x06
    22a8:	0f c0       	rjmp	.+30     	; 0x22c8 <ULTRASONIC_trigger+0x148>
    22aa:	88 ec       	ldi	r24, 0xC8	; 200
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	9d 83       	std	Y+5, r25	; 0x05
    22b0:	8c 83       	std	Y+4, r24	; 0x04
    22b2:	8c 81       	ldd	r24, Y+4	; 0x04
    22b4:	9d 81       	ldd	r25, Y+5	; 0x05
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	f1 f7       	brne	.-4      	; 0x22b6 <ULTRASONIC_trigger+0x136>
    22ba:	9d 83       	std	Y+5, r25	; 0x05
    22bc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22be:	8e 81       	ldd	r24, Y+6	; 0x06
    22c0:	9f 81       	ldd	r25, Y+7	; 0x07
    22c2:	01 97       	sbiw	r24, 0x01	; 1
    22c4:	9f 83       	std	Y+7, r25	; 0x07
    22c6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c8:	8e 81       	ldd	r24, Y+6	; 0x06
    22ca:	9f 81       	ldd	r25, Y+7	; 0x07
    22cc:	00 97       	sbiw	r24, 0x00	; 0
    22ce:	69 f7       	brne	.-38     	; 0x22aa <ULTRASONIC_trigger+0x12a>
    22d0:	24 c0       	rjmp	.+72     	; 0x231a <ULTRASONIC_trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d2:	68 85       	ldd	r22, Y+8	; 0x08
    22d4:	79 85       	ldd	r23, Y+9	; 0x09
    22d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    22d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    22da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	9f 83       	std	Y+7, r25	; 0x07
    22e4:	8e 83       	std	Y+6, r24	; 0x06
    22e6:	8e 81       	ldd	r24, Y+6	; 0x06
    22e8:	9f 81       	ldd	r25, Y+7	; 0x07
    22ea:	9b 83       	std	Y+3, r25	; 0x03
    22ec:	8a 83       	std	Y+2, r24	; 0x02
    22ee:	8a 81       	ldd	r24, Y+2	; 0x02
    22f0:	9b 81       	ldd	r25, Y+3	; 0x03
    22f2:	01 97       	sbiw	r24, 0x01	; 1
    22f4:	f1 f7       	brne	.-4      	; 0x22f2 <ULTRASONIC_trigger+0x172>
    22f6:	9b 83       	std	Y+3, r25	; 0x03
    22f8:	8a 83       	std	Y+2, r24	; 0x02
    22fa:	0f c0       	rjmp	.+30     	; 0x231a <ULTRASONIC_trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22fc:	69 89       	ldd	r22, Y+17	; 0x11
    22fe:	7a 89       	ldd	r23, Y+18	; 0x12
    2300:	8b 89       	ldd	r24, Y+19	; 0x13
    2302:	9c 89       	ldd	r25, Y+20	; 0x14
    2304:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	88 8b       	std	Y+16, r24	; 0x10
    230e:	88 89       	ldd	r24, Y+16	; 0x10
    2310:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	8a 95       	dec	r24
    2316:	f1 f7       	brne	.-4      	; 0x2314 <ULTRASONIC_trigger+0x194>
    2318:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(15);
	GPIO_writePin(ULTRASONIC_TRIGGER_PORT_ID ,ULTRASONIC_TRIGGER_PIN_ID, LOGIC_LOW);
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	65 e0       	ldi	r22, 0x05	; 5
    231e:	40 e0       	ldi	r20, 0x00	; 0
    2320:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <GPIO_writePin>
}
    2324:	68 96       	adiw	r28, 0x18	; 24
    2326:	0f b6       	in	r0, 0x3f	; 63
    2328:	f8 94       	cli
    232a:	de bf       	out	0x3e, r29	; 62
    232c:	0f be       	out	0x3f, r0	; 63
    232e:	cd bf       	out	0x3d, r28	; 61
    2330:	cf 91       	pop	r28
    2332:	df 91       	pop	r29
    2334:	08 95       	ret

00002336 <ULTRASONIC_readDistance>:
*➢ Send the trigger pulse by using Ultrasonic_Trigger function.
*➢
*➢  Start the measurements by the ICU from this moment
*
*/
uint16 ULTRASONIC_readDistance(void){
    2336:	df 93       	push	r29
    2338:	cf 93       	push	r28
    233a:	00 d0       	rcall	.+0      	; 0x233c <ULTRASONIC_readDistance+0x6>
    233c:	cd b7       	in	r28, 0x3d	; 61
    233e:	de b7       	in	r29, 0x3e	; 62
	uint16 distance;
	ULTRASONIC_trigger();          /*to trigger the sensor to be ready*/
    2340:	0e 94 c0 10 	call	0x2180	; 0x2180 <ULTRASONIC_trigger>
	distance =(g_PeriodTime/58.8); /*the equation to get the distance from the time*/
    2344:	80 91 7b 01 	lds	r24, 0x017B
    2348:	90 91 7c 01 	lds	r25, 0x017C
    234c:	cc 01       	movw	r24, r24
    234e:	a0 e0       	ldi	r26, 0x00	; 0
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	bc 01       	movw	r22, r24
    2354:	cd 01       	movw	r24, r26
    2356:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	bc 01       	movw	r22, r24
    2360:	cd 01       	movw	r24, r26
    2362:	23 e3       	ldi	r18, 0x33	; 51
    2364:	33 e3       	ldi	r19, 0x33	; 51
    2366:	4b e6       	ldi	r20, 0x6B	; 107
    2368:	52 e4       	ldi	r21, 0x42	; 66
    236a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	bc 01       	movw	r22, r24
    2374:	cd 01       	movw	r24, r26
    2376:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	9a 83       	std	Y+2, r25	; 0x02
    2380:	89 83       	std	Y+1, r24	; 0x01
	return distance;
    2382:	89 81       	ldd	r24, Y+1	; 0x01
    2384:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2386:	0f 90       	pop	r0
    2388:	0f 90       	pop	r0
    238a:	cf 91       	pop	r28
    238c:	df 91       	pop	r29
    238e:	08 95       	ret

00002390 <ULTRASONIC_edgeProcessing>:

➢ This is used to calculate the high time (pulse time) generated by
the ultrasonic sensor
*
*/
static void ULTRASONIC_edgeProcessing(void){
    2390:	df 93       	push	r29
    2392:	cf 93       	push	r28
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
	g_edgcount++;
    2398:	80 91 78 01 	lds	r24, 0x0178
    239c:	8f 5f       	subi	r24, 0xFF	; 255
    239e:	80 93 78 01 	sts	0x0178, r24
	if(g_edgcount==1){
    23a2:	80 91 78 01 	lds	r24, 0x0178
    23a6:	81 30       	cpi	r24, 0x01	; 1
    23a8:	31 f4       	brne	.+12     	; 0x23b6 <ULTRASONIC_edgeProcessing+0x26>
		ICU_setEdge(falling); /*to set the edge with falling edge*/
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	0e 94 54 10 	call	0x20a8	; 0x20a8 <ICU_setEdge>
		ICU_clearTimer();  /*to count time from there*/
    23b0:	0e 94 7e 10 	call	0x20fc	; 0x20fc <ICU_clearTimer>
    23b4:	0f c0       	rjmp	.+30     	; 0x23d4 <ULTRASONIC_edgeProcessing+0x44>
	}
	else if(g_edgcount==2){
    23b6:	80 91 78 01 	lds	r24, 0x0178
    23ba:	82 30       	cpi	r24, 0x02	; 2
    23bc:	59 f4       	brne	.+22     	; 0x23d4 <ULTRASONIC_edgeProcessing+0x44>
		g_PeriodTime= ICU_getInputCapture();
    23be:	0e 94 73 10 	call	0x20e6	; 0x20e6 <ICU_getInputCapture>
    23c2:	90 93 7c 01 	sts	0x017C, r25
    23c6:	80 93 7b 01 	sts	0x017B, r24
		ICU_setEdge(rising);    /*to set the edge with rising edge*/
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	0e 94 54 10 	call	0x20a8	; 0x20a8 <ICU_setEdge>
		ICU_clearTimer();
    23d0:	0e 94 7e 10 	call	0x20fc	; 0x20fc <ICU_clearTimer>
	}

}
    23d4:	cf 91       	pop	r28
    23d6:	df 91       	pop	r29
    23d8:	08 95       	ret

000023da <__prologue_saves__>:
    23da:	2f 92       	push	r2
    23dc:	3f 92       	push	r3
    23de:	4f 92       	push	r4
    23e0:	5f 92       	push	r5
    23e2:	6f 92       	push	r6
    23e4:	7f 92       	push	r7
    23e6:	8f 92       	push	r8
    23e8:	9f 92       	push	r9
    23ea:	af 92       	push	r10
    23ec:	bf 92       	push	r11
    23ee:	cf 92       	push	r12
    23f0:	df 92       	push	r13
    23f2:	ef 92       	push	r14
    23f4:	ff 92       	push	r15
    23f6:	0f 93       	push	r16
    23f8:	1f 93       	push	r17
    23fa:	cf 93       	push	r28
    23fc:	df 93       	push	r29
    23fe:	cd b7       	in	r28, 0x3d	; 61
    2400:	de b7       	in	r29, 0x3e	; 62
    2402:	ca 1b       	sub	r28, r26
    2404:	db 0b       	sbc	r29, r27
    2406:	0f b6       	in	r0, 0x3f	; 63
    2408:	f8 94       	cli
    240a:	de bf       	out	0x3e, r29	; 62
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	cd bf       	out	0x3d, r28	; 61
    2410:	09 94       	ijmp

00002412 <__epilogue_restores__>:
    2412:	2a 88       	ldd	r2, Y+18	; 0x12
    2414:	39 88       	ldd	r3, Y+17	; 0x11
    2416:	48 88       	ldd	r4, Y+16	; 0x10
    2418:	5f 84       	ldd	r5, Y+15	; 0x0f
    241a:	6e 84       	ldd	r6, Y+14	; 0x0e
    241c:	7d 84       	ldd	r7, Y+13	; 0x0d
    241e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2420:	9b 84       	ldd	r9, Y+11	; 0x0b
    2422:	aa 84       	ldd	r10, Y+10	; 0x0a
    2424:	b9 84       	ldd	r11, Y+9	; 0x09
    2426:	c8 84       	ldd	r12, Y+8	; 0x08
    2428:	df 80       	ldd	r13, Y+7	; 0x07
    242a:	ee 80       	ldd	r14, Y+6	; 0x06
    242c:	fd 80       	ldd	r15, Y+5	; 0x05
    242e:	0c 81       	ldd	r16, Y+4	; 0x04
    2430:	1b 81       	ldd	r17, Y+3	; 0x03
    2432:	aa 81       	ldd	r26, Y+2	; 0x02
    2434:	b9 81       	ldd	r27, Y+1	; 0x01
    2436:	ce 0f       	add	r28, r30
    2438:	d1 1d       	adc	r29, r1
    243a:	0f b6       	in	r0, 0x3f	; 63
    243c:	f8 94       	cli
    243e:	de bf       	out	0x3e, r29	; 62
    2440:	0f be       	out	0x3f, r0	; 63
    2442:	cd bf       	out	0x3d, r28	; 61
    2444:	ed 01       	movw	r28, r26
    2446:	08 95       	ret

00002448 <itoa>:
    2448:	fb 01       	movw	r30, r22
    244a:	9f 01       	movw	r18, r30
    244c:	e8 94       	clt
    244e:	42 30       	cpi	r20, 0x02	; 2
    2450:	c4 f0       	brlt	.+48     	; 0x2482 <itoa+0x3a>
    2452:	45 32       	cpi	r20, 0x25	; 37
    2454:	b4 f4       	brge	.+44     	; 0x2482 <itoa+0x3a>
    2456:	4a 30       	cpi	r20, 0x0A	; 10
    2458:	29 f4       	brne	.+10     	; 0x2464 <itoa+0x1c>
    245a:	97 fb       	bst	r25, 7
    245c:	1e f4       	brtc	.+6      	; 0x2464 <itoa+0x1c>
    245e:	90 95       	com	r25
    2460:	81 95       	neg	r24
    2462:	9f 4f       	sbci	r25, 0xFF	; 255
    2464:	64 2f       	mov	r22, r20
    2466:	77 27       	eor	r23, r23
    2468:	0e 94 55 12 	call	0x24aa	; 0x24aa <__udivmodhi4>
    246c:	80 5d       	subi	r24, 0xD0	; 208
    246e:	8a 33       	cpi	r24, 0x3A	; 58
    2470:	0c f0       	brlt	.+2      	; 0x2474 <itoa+0x2c>
    2472:	89 5d       	subi	r24, 0xD9	; 217
    2474:	81 93       	st	Z+, r24
    2476:	cb 01       	movw	r24, r22
    2478:	00 97       	sbiw	r24, 0x00	; 0
    247a:	a1 f7       	brne	.-24     	; 0x2464 <itoa+0x1c>
    247c:	16 f4       	brtc	.+4      	; 0x2482 <itoa+0x3a>
    247e:	5d e2       	ldi	r21, 0x2D	; 45
    2480:	51 93       	st	Z+, r21
    2482:	10 82       	st	Z, r1
    2484:	c9 01       	movw	r24, r18
    2486:	0c 94 45 12 	jmp	0x248a	; 0x248a <strrev>

0000248a <strrev>:
    248a:	dc 01       	movw	r26, r24
    248c:	fc 01       	movw	r30, r24
    248e:	67 2f       	mov	r22, r23
    2490:	71 91       	ld	r23, Z+
    2492:	77 23       	and	r23, r23
    2494:	e1 f7       	brne	.-8      	; 0x248e <strrev+0x4>
    2496:	32 97       	sbiw	r30, 0x02	; 2
    2498:	04 c0       	rjmp	.+8      	; 0x24a2 <strrev+0x18>
    249a:	7c 91       	ld	r23, X
    249c:	6d 93       	st	X+, r22
    249e:	70 83       	st	Z, r23
    24a0:	62 91       	ld	r22, -Z
    24a2:	ae 17       	cp	r26, r30
    24a4:	bf 07       	cpc	r27, r31
    24a6:	c8 f3       	brcs	.-14     	; 0x249a <strrev+0x10>
    24a8:	08 95       	ret

000024aa <__udivmodhi4>:
    24aa:	aa 1b       	sub	r26, r26
    24ac:	bb 1b       	sub	r27, r27
    24ae:	51 e1       	ldi	r21, 0x11	; 17
    24b0:	07 c0       	rjmp	.+14     	; 0x24c0 <__udivmodhi4_ep>

000024b2 <__udivmodhi4_loop>:
    24b2:	aa 1f       	adc	r26, r26
    24b4:	bb 1f       	adc	r27, r27
    24b6:	a6 17       	cp	r26, r22
    24b8:	b7 07       	cpc	r27, r23
    24ba:	10 f0       	brcs	.+4      	; 0x24c0 <__udivmodhi4_ep>
    24bc:	a6 1b       	sub	r26, r22
    24be:	b7 0b       	sbc	r27, r23

000024c0 <__udivmodhi4_ep>:
    24c0:	88 1f       	adc	r24, r24
    24c2:	99 1f       	adc	r25, r25
    24c4:	5a 95       	dec	r21
    24c6:	a9 f7       	brne	.-22     	; 0x24b2 <__udivmodhi4_loop>
    24c8:	80 95       	com	r24
    24ca:	90 95       	com	r25
    24cc:	bc 01       	movw	r22, r24
    24ce:	cd 01       	movw	r24, r26
    24d0:	08 95       	ret

000024d2 <_exit>:
    24d2:	f8 94       	cli

000024d4 <__stop_program>:
    24d4:	ff cf       	rjmp	.-2      	; 0x24d4 <__stop_program>
